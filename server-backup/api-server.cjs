const fastify = require('fastify')({ logger: true });
const SQLiteManager = require('./SQLiteManager.cjs');
const db = new SQLiteManager();

// CORS –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
fastify.register(require('@fastify/cors'), {
  origin: true,
  credentials: true
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏
fastify.get('/api/vehicles', async (request, reply) => {
  try {
    const vehicles = db.getAllVehicles();
    return {
      success: true,
      data: vehicles,
      count: vehicles.length
    };
  } catch (error) {
    reply.status(500);
    return { success: false, error: error.message };
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
fastify.get('/api/telemetry/latest', async (request, reply) => {
  try {
    const telemetry = db.getLatestTelemetry();
    const formatted = telemetry.map(t => ({
      vehicle_id: t.vehicle_id,
      vehicle_name: t.vehicle_name,
      lat: t.lat,
      lng: t.lng,
      speed: t.speed,
      battery: t.battery,
      temperature: t.temperature,
      rpm: t.rpm,
      timestamp: new Date(t.timestamp).toISOString()
    }));
    
    return {
      success: true,
      data: formatted
    };
  } catch (error) {
    reply.status(500);
    return { success: false, error: error.message };
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ timestamp (delta-–∑–∞–ø—Ä–æ—Å—ã)
fastify.get('/api/telemetry/delta', async (request, reply) => {
  try {
    const { since } = request.query;
    const lastTimestamp = since ? parseInt(since) : 0;
    
    const telemetry = db.getLatestTelemetryAfter(lastTimestamp);
    const formatted = telemetry.map(t => ({
      vehicle_id: t.vehicle_id,
      vehicle_name: t.vehicle_name,
      lat: t.lat,
      lng: t.lng,
      speed: t.speed,
      battery: t.battery,
      temperature: t.temperature,
      rpm: t.rpm,
      timestamp: t.timestamp // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —á–∏—Å–ª–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    }));
    
    return {
      success: true,
      data: formatted,
      count: formatted.length,
      lastTimestamp: formatted.length > 0 ? Math.max(...formatted.map(f => f.timestamp)) : lastTimestamp
    };
  } catch (error) {
    reply.status(500);
    return { success: false, error: error.message };
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
fastify.get('/api/telemetry/history', async (request, reply) => {
  try {
    const { range = '10min', vehicleId } = request.query;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const rangeHours = {
      '10min': 0.17, // 10 –º–∏–Ω—É—Ç
      '1h': 1,
      '6h': 6,
      '12h': 12,
      '24h': 24
    };
    
    const hours = rangeHours[range] || 1;
    const history = db.getTelemetryHistory(vehicleId, hours);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ
    const vehicleData = {};
    history.forEach(record => {
      if (!vehicleData[record.vehicle_id]) {
        vehicleData[record.vehicle_id] = {
          vehicleId: record.vehicle_id,
          vehicleName: record.vehicle_name,
          data: []
        };
      }
      
      vehicleData[record.vehicle_id].data.push({
        timestamp: record.timestamp,
        speed: record.speed || 0,
        temperature: record.temperature || 0,
        battery: record.battery || 0,
        rpm: record.rpm || 0
      });
    });
    
    return {
      success: true,
      data: Object.values(vehicleData),
      range,
      count: Object.keys(vehicleData).length
    };
  } catch (error) {
    reply.status(500);
    return { success: false, error: error.message };
  }
});

// API —Å—Ç–∞—Ç—É—Å–∞
fastify.get('/api/status', async (request, reply) => {
  return {
    status: 'API Server running with SQLite',
    timestamp: new Date().toISOString(),
    database: 'SQLite'
  };
});

// MQTT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API endpoints
fastify.get('/api/mqtt/status', async (request, reply) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const recentTelemetry = db.getLatestTelemetry();
    const activeDevices = recentTelemetry.filter(t => {
      const lastUpdate = new Date(t.timestamp);
      const now = new Date();
      const timeDiff = (now - lastUpdate) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      return timeDiff < 300; // –∞–∫—Ç–∏–≤–Ω—ã–µ –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
    }).length;
    
    const lastMessage = recentTelemetry.length > 0 ? {
      vehicle_id: recentTelemetry[0].vehicle_id,
      timestamp: recentTelemetry[0].timestamp,
      data: {
        speed: recentTelemetry[0].speed,
        battery: recentTelemetry[0].battery,
        temperature: recentTelemetry[0].temperature
      }
    } : null;
    
    return {
      success: true,
      connected: activeDevices > 0,
      status: activeDevices > 0 ? 'connected' : 'disconnected',
      lastMessage: lastMessage,
      activeDevices: activeDevices,
      totalDevices: recentTelemetry.length,
      timestamp: new Date().toISOString(),
      message: `MQTT –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç ${activeDevices} —É—Å—Ç—Ä–æ–π—Å—Ç–≤`
    };
  } catch (error) {
    console.error('MQTT status error:', error);
    reply.status(500);
    return {
      success: false,
      connected: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ MQTT',
      timestamp: new Date().toISOString()
    };
  }
});

fastify.post('/api/mqtt/config', async (request, reply) => {
  try {
    const config = request.body;
    console.log('üîß MQTT config update received:', config);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (!config.server || !config.port) {
      reply.status(400);
      return {
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ—Ä—Ç MQTT'
      };
    }
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ:
    // 1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª/–ë–î
    // 2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å MQTT –∫–æ–ª–ª–µ–∫—Ç–æ—Ä —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    
    return {
      success: true,
      message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ MQTT —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞.',
      config: {
        server: config.server,
        port: config.port,
        client_id: config.client_id || 'mapmon-server',
        topics: config.topics || ['vehicles/+/telemetry']
      }
    };
  } catch (error) {
    console.error('MQTT config error:', error);
    reply.status(500);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ MQTT'
    };
  }
});

fastify.post('/api/mqtt/restart', async (request, reply) => {
  try {
    console.log('üîÑ MQTT restart requested');
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ:
    // 1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π MQTT –∫–ª–∏–µ–Ω—Ç
    // 2. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    // 3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    return {
      success: true,
      message: 'MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ',
      timestamp: new Date().toISOString(),
      status: 'restarted'
    };
  } catch (error) {
    console.error('MQTT restart error:', error);
    reply.status(500);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'
    };
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const start = async () => {
  try {
    await fastify.listen({ port: 3001, host: '0.0.0.0' });
    console.log('‚úÖ API Server - SQLite');
  } catch (err) {
    fastify.log.error(err);
    process.exit(1);
  }
};

start();
