import Fastify from 'fastify'
import fastifyStatic from '@fastify/static'
import fastifyWebsocket from '@fastify/websocket'
import fastifyCors from '@fastify/cors'
import { fileURLToPath } from 'url'
import { dirname, join } from 'path'

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// –°–æ–∑–¥–∞–µ–º Fastify —ç–∫–∑–µ–º–ø–ª—è—Ä
const fastify = Fastify({
  logger: {
    level: 'info',
    transport: {
      target: 'pino-pretty',
      options: {
        colorize: true,
        translateTime: 'HH:MM:ss Z',
        ignore: 'pid,hostname'
      }
    }
  }
})

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
await fastify.register(fastifyCors, {
  origin: true,
  credentials: true
})

await fastify.register(fastifyWebsocket)

await fastify.register(fastifyStatic, {
  root: join(__dirname, '..', 'public'),
  prefix: '/public/'
})

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface VehicleData {
  id: string
  name: string
  lat: number
  lng: number
  speed: number
  status: 'active' | 'stopped'
  lastUpdate: Date
  battery?: number
  fuel?: number
}

interface TelemetryMessage {
  vehicleId: string
  timestamp: Date
  lat: number
  lng: number
  speed: number
  battery?: number
  fuel?: number
  status?: string
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
const vehicles = new Map<string, VehicleData>()
const connectedClients = new Set<any>()

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
vehicles.set('tractor_001', {
  id: 'tractor_001',
  name: '–¢—Ä–∞–∫—Ç–æ—Ä –ú–¢–ó-82',
  lat: 55.7558,
  lng: 37.6176,
  speed: 15,
  status: 'active',
  lastUpdate: new Date(),
  battery: 85,
  fuel: 67
})

vehicles.set('combine_001', {
  id: 'combine_001',
  name: '–ö–æ–º–±–∞–π–Ω –ö–ó–°-10',
  lat: 55.7608,
  lng: 37.6256,
  speed: 0,
  status: 'stopped',
  lastUpdate: new Date(),
  battery: 92,
  fuel: 34
})

// API –º–∞—Ä—à—Ä—É—Ç—ã

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ–π —Ç–µ—Ö–Ω–∏–∫–∏
fastify.get('/api/vehicles', async (request, reply) => {
  const vehicleList = Array.from(vehicles.values())
  return {
    success: true,
    data: vehicleList,
    count: vehicleList.length
  }
})

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–µ
fastify.get<{Params: {id: string}}>('/api/vehicles/:id', async (request, reply) => {
  const { id } = request.params
  const vehicle = vehicles.get(id)
  
  if (!vehicle) {
    reply.status(404)
    return {
      success: false,
      error: '–¢–µ—Ö–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    }
  }
  
  return {
    success: true,
    data: vehicle
  }
})

// –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ (–∏–º–∏—Ç–∞—Ü–∏—è MQTT)
fastify.post<{Body: TelemetryMessage}>('/api/telemetry', async (request, reply) => {
  const data = request.body
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  if (!data.vehicleId || typeof data.lat !== 'number' || typeof data.lng !== 'number') {
    reply.status(400)
    return {
      success: false,
      error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏'
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
  const existingVehicle = vehicles.get(data.vehicleId)
  const updatedVehicle: VehicleData = {
    id: data.vehicleId,
    name: existingVehicle?.name || `–¢–µ—Ö–Ω–∏–∫–∞ ${data.vehicleId}`,
    lat: data.lat,
    lng: data.lng,
    speed: data.speed || 0,
    status: data.status as 'active' | 'stopped' || (data.speed > 0 ? 'active' : 'stopped'),
    lastUpdate: new Date(),
    battery: data.battery || existingVehicle?.battery,
    fuel: data.fuel || existingVehicle?.fuel
  }
  
  vehicles.set(data.vehicleId, updatedVehicle)
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
  broadcastToClients({
    type: 'vehicle_update',
    data: updatedVehicle
  })
  
  return {
    success: true,
    data: updatedVehicle
  }
})

// WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
fastify.register(async function (fastify) {
  fastify.get('/ws', { websocket: true }, (connection, req) => {
    connectedClients.add(connection)
    
    fastify.log.info('–ù–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ')
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
    connection.socket.send(JSON.stringify({
      type: 'initial_data',
      data: Array.from(vehicles.values())
    }))
    
    connection.socket.on('message', (message) => {
      try {
        const data = JSON.parse(message.toString())
        
        switch (data.type) {
          case 'ping':
            connection.socket.send(JSON.stringify({ type: 'pong' }))
            break
            
          case 'subscribe_vehicle':
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
            fastify.log.info(`–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏–∫—É: ${data.vehicleId}`)
            break
            
          default:
            fastify.log.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${data.type}`)
        }
      } catch (error) {
        fastify.log.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      }
    })
    
    connection.socket.on('close', () => {
      connectedClients.delete(connection)
      fastify.log.info('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ')
    })
    
    connection.socket.on('error', (error) => {
      fastify.log.error('WebSocket –æ—à–∏–±–∫–∞:', error)
      connectedClients.delete(connection)
    })
  })
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
function broadcastToClients(message: any) {
  const messageStr = JSON.stringify(message)
  
  connectedClients.forEach((client) => {
    try {
      if (client.socket.readyState === 1) { // OPEN
        client.socket.send(messageStr)
      }
    } catch (error) {
      fastify.log.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É:', error)
      connectedClients.delete(client)
    }
  })
}

// –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç MQTT (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
function simulateMqttData() {
  const vehicleIds = Array.from(vehicles.keys())
  
  vehicleIds.forEach((vehicleId) => {
    const vehicle = vehicles.get(vehicleId)!
    
    // –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–∏–º–∏—Ç–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è)
    const latDelta = (Math.random() - 0.5) * 0.001
    const lngDelta = (Math.random() - 0.5) * 0.001
    const speedDelta = Math.random() * 10 - 5
    
    const updatedVehicle: VehicleData = {
      ...vehicle,
      lat: vehicle.lat + latDelta,
      lng: vehicle.lng + lngDelta,
      speed: Math.max(0, Math.min(50, vehicle.speed + speedDelta)),
      lastUpdate: new Date()
    }
    
    updatedVehicle.status = updatedVehicle.speed > 1 ? 'active' : 'stopped'
    
    vehicles.set(vehicleId, updatedVehicle)
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º
    broadcastToClients({
      type: 'vehicle_update',
      data: updatedVehicle
    })
  })
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é MQTT –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
setInterval(simulateMqttData, 5000)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
const gracefulShutdown = async () => {
  fastify.log.info('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...')
  
  try {
    await fastify.close()
    fastify.log.info('–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    process.exit(0)
  } catch (error) {
    fastify.log.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', error)
    process.exit(1)
  }
}

process.on('SIGTERM', gracefulShutdown)
process.on('SIGINT', gracefulShutdown)

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const start = async () => {
  try {
    const port = process.env.PORT ? parseInt(process.env.PORT) : 3001
    const host = process.env.HOST || '0.0.0.0'
    
    await fastify.listen({ port, host })
    fastify.log.info(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${host}:${port}`)
    fastify.log.info(`üì° WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ ws://${host}:${port}/ws`)
    
  } catch (error) {
    fastify.log.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error)
    process.exit(1)
  }
}

start() 