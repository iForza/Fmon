const mqtt = require('mqtt');
const SQLiteManager = require('./SQLiteManager.cjs');
const db = new SQLiteManager();

console.log('üîå Connecting to WQTT.RU MQTT Collector v2.0 (m9.wqtt.ru:20264)...');
const client = mqtt.connect('mqtt://m9.wqtt.ru:20264', {
    clientId: 'mapmon-collector-v2-' + Date.now(),
    username: 'u_MZEPA5',
    password: 'L3YAUTS6',
    keepalive: 120,
    reconnectPeriod: 3000,
    connectTimeout: 15 * 1000,
    clean: true,
    protocolVersion: 4
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
let messageStats = {
    telemetry: 0,
    gps: 0,
    sensors: 0,
    health: 0,
    connection: 0,
    alerts: 0,
    legacy: 0,
    total: 0
};

client.on('connect', () => {
    console.log('‚úÖ MQTT Connected - WQTT.RU Collector v2.0');
    console.log('üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    console.log('');
    
    // === –ü–û–î–ü–ò–°–ö–ò –ù–ê –¢–û–ü–ò–ö–ò v2.0 ===
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    client.subscribe('mapmon/vehicles/+/data/telemetry', { qos: 1 }, (err) => {
        if (!err) console.log('üìä –ü–æ–¥–ø–∏—Å–∫–∞: mapmon/vehicles/+/data/telemetry (QoS 1)');
    });
    
    client.subscribe('mapmon/vehicles/+/data/gps', { qos: 0 }, (err) => {
        if (!err) console.log('üìç –ü–æ–¥–ø–∏—Å–∫–∞: mapmon/vehicles/+/data/gps (QoS 0)');
    });
    
    client.subscribe('mapmon/vehicles/+/data/sensors', { qos: 1 }, (err) => {
        if (!err) console.log('üîß –ü–æ–¥–ø–∏—Å–∫–∞: mapmon/vehicles/+/data/sensors (QoS 1)');
    });
    
    // –°—Ç–∞—Ç—É—Å—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    client.subscribe('mapmon/vehicles/+/status/connection', { qos: 1 }, (err) => {
        if (!err) console.log('üîå –ü–æ–¥–ø–∏—Å–∫–∞: mapmon/vehicles/+/status/connection (QoS 1)');
    });
    
    client.subscribe('mapmon/vehicles/+/status/health', { qos: 1 }, (err) => {
        if (!err) console.log('üíì –ü–æ–¥–ø–∏—Å–∫–∞: mapmon/vehicles/+/status/health (QoS 1)');
    });
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    client.subscribe('mapmon/vehicles/+/alerts/critical', { qos: 2 }, (err) => {
        if (!err) console.log('üö® –ü–æ–¥–ø–∏—Å–∫–∞: mapmon/vehicles/+/alerts/critical (QoS 2)');
    });
    
    client.subscribe('mapmon/vehicles/+/alerts/warnings', { qos: 1 }, (err) => {
        if (!err) console.log('‚ö†Ô∏è  –ü–æ–¥–ø–∏—Å–∫–∞: mapmon/vehicles/+/alerts/warnings (QoS 1)');
    });
    
    // === LEGACY –¢–û–ü–ò–ö–ò (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å) ===
    client.subscribe('car', { qos: 0 }, (err) => {
        if (!err) console.log('üöó –ü–æ–¥–ø–∏—Å–∫–∞: car (legacy, QoS 0)');
    });
    
    client.subscribe('vehicles/+/telemetry', { qos: 0 }, (err) => {
        if (!err) console.log('üìä –ü–æ–¥–ø–∏—Å–∫–∞: vehicles/+/telemetry (legacy, QoS 0)');
    });
    
    client.subscribe('vehicles/+/status', { qos: 0 }, (err) => {
        if (!err) console.log('üì° –ü–æ–¥–ø–∏—Å–∫–∞: vehicles/+/status (legacy, QoS 0)');
    });
    
    client.subscribe('vehicles/+/heartbeat', { qos: 0 }, (err) => {
        if (!err) console.log('üíì –ü–æ–¥–ø–∏—Å–∫–∞: vehicles/+/heartbeat (legacy, QoS 0)');
    });
    
    console.log('');
    console.log('üì° –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ WQTT.RU v2.0 –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');
    console.log('üéØ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç ESP32 —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
    console.log('');
});

client.on('message', (topic, message) => {
    try {
        const messageStr = message.toString();
        console.log(`üì° MQTT v2.0 [${topic}]: ${messageStr.substring(0, 100)}${messageStr.length > 100 ? '...' : ''}`);
        
        let data;
        try {
            data = JSON.parse(messageStr);
        } catch (parseError) {
            console.warn('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ JSON, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:', messageStr);
            data = { raw_message: messageStr };
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        const messageType = getMessageType(topic);
        
        switch (messageType) {
            case 'telemetry':
                handleTelemetryMessage(topic, data);
                messageStats.telemetry++;
                break;
                
            case 'gps':
                handleGpsMessage(topic, data);
                messageStats.gps++;
                break;
                
            case 'sensors':
                handleSensorsMessage(topic, data);
                messageStats.sensors++;
                break;
                
            case 'health':
                handleHealthMessage(topic, data);
                messageStats.health++;
                break;
                
            case 'connection':
                handleConnectionMessage(topic, data);
                messageStats.connection++;
                break;
                
            case 'alerts':
                handleAlertsMessage(topic, data);
                messageStats.alerts++;
                break;
                
            case 'legacy':
                handleLegacyMessage(topic, data);
                messageStats.legacy++;
                break;
                
            default:
                console.warn('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', topic);
        }
        
        messageStats.total++;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        if (messageStats.total % 50 === 0) {
            printMessageStats();
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è MQTT:', error);
        console.error('Topic:', topic);
        console.error('Message:', message.toString());
    }
});

function getMessageType(topic) {
    if (topic.includes('/data/telemetry')) return 'telemetry';
    if (topic.includes('/data/gps')) return 'gps';
    if (topic.includes('/data/sensors')) return 'sensors';
    if (topic.includes('/status/health')) return 'health';
    if (topic.includes('/status/connection')) return 'connection';
    if (topic.includes('/alerts/')) return 'alerts';
    if (topic === 'car' || topic.includes('vehicles/') && !topic.includes('mapmon/')) return 'legacy';
    return 'unknown';
}

function handleTelemetryMessage(topic, data) {
    const vehicleId = extractVehicleId(topic, data);
    if (!vehicleId) return;
    
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –¥–ª—è ${vehicleId}`);
    
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –≤ SQLite
        const telemetryData = {
            vehicle_id: vehicleId,
            timestamp: Date.now(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
            lat: data.location?.lat || data.lat || 0,
            lng: data.location?.lng || data.lng || 0,
            speed: data.motion?.speed || data.speed || 0,
            battery: data.power?.battery || data.battery || null,
            temperature: data.environment?.temperature || data.temperature || null,
            rpm: data.engine?.rpm || data.rpm || null
        };
        
        const result = saveTelemetryToDatabase(telemetryData);
        
        if (result.success) {
            console.log(`üíæ –¢–ï–õ–ï–ú–ï–¢–†–ò–Ø –°–û–•–†–ê–ù–ï–ù–ê - ID: ${result.id}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–∏–∫–µ
            updateVehicleInfo(vehicleId, {
                name: data.vehicle_name || `Vehicle ${vehicleId}`,
                status: data.engine?.status || data.status || 'unknown',
                last_seen: new Date().toISOString()
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏:', error);
    }
}

function handleGpsMessage(topic, data) {
    const vehicleId = extractVehicleId(topic, data);
    if (!vehicleId) return;
    
    console.log(`üìç GPS –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è ${vehicleId}: ${data.lat}, ${data.lng} (${data.speed} –∫–º/—á)`);
    
    // GPS –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É gps_tracks –≤ –±—É–¥—É—â–µ–º
}

function handleSensorsMessage(topic, data) {
    const vehicleId = extractVehicleId(topic, data);
    if (!vehicleId) return;
    
    console.log(`üîß –î–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è ${vehicleId}:`, {
        fuel_level: data.sensors?.fuel_level,
        oil_pressure: data.sensors?.oil_pressure,
        hydraulic_pressure: data.sensors?.hydraulic_pressure
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å—Ö–µ–º—É –ë–î)
}

function handleHealthMessage(topic, data) {
    const vehicleId = extractVehicleId(topic, data);
    if (!vehicleId) return;
    
    console.log(`üíì –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è ${vehicleId}:`, {
        uptime: data.system?.uptime,
        free_memory: data.system?.free_memory,
        wifi_rssi: data.system?.wifi_rssi,
        mqtt_reconnects: data.system?.mqtt_reconnects
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    updateVehicleHealth(vehicleId, data);
}

function handleConnectionMessage(topic, data) {
    const vehicleId = extractVehicleId(topic, data);
    if (!vehicleId) return;
    
    console.log(`üîå –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${vehicleId}: ${data.status}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    updateVehicleConnectionStatus(vehicleId, data.status, data.rssi);
}

function handleAlertsMessage(topic, data) {
    const vehicleId = extractVehicleId(topic, data);
    if (!vehicleId) return;
    
    const alertLevel = topic.includes('/critical') ? 'CRITICAL' : 'WARNING';
    console.log(`‚ö†Ô∏è ${alertLevel} ALERT ${vehicleId}: ${data.message}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É alerts)
    logAlert(vehicleId, alertLevel, data.message, data.priority);
}

function handleLegacyMessage(topic, data) {
    console.log(`üöó Legacy —Å–æ–æ–±—â–µ–Ω–∏–µ [${topic}] - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç`);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º legacy —Ñ–æ—Ä–º–∞—Ç –≤ –Ω–æ–≤—ã–π
    const convertedData = convertLegacyToV2(data);
    
    if (convertedData.vehicle_id) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é
        const telemetryData = {
            vehicle_id: convertedData.vehicle_id,
            timestamp: Date.now(),
            lat: convertedData.lat || 0,
            lng: convertedData.lng || 0,
            speed: convertedData.speed || 0,
            battery: convertedData.battery || null,
            temperature: convertedData.temperature || null,
            rpm: convertedData.rpm || null
        };
        
        const result = saveTelemetryToDatabase(telemetryData);
        if (result.success) {
            console.log(`üíæ LEGACY –¢–ï–õ–ï–ú–ï–¢–†–ò–Ø –°–û–•–†–ê–ù–ï–ù–ê - ID: ${result.id}`);
        }
    }
}

function extractVehicleId(topic, data) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º vehicle_id –∏–∑ —Ç–æ–ø–∏–∫–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö
    const topicParts = topic.split('/');
    
    if (topic.startsWith('mapmon/vehicles/')) {
        return topicParts[2]; // mapmon/vehicles/ESP32_Car_2046/...
    }
    
    if (topic.startsWith('vehicles/')) {
        return topicParts[1]; // vehicles/ESP32_Car_2046/...
    }
    
    // –ò–∑ –¥–∞–Ω–Ω—ã—Ö
    return data.vehicle_id || data.id || null;
}

function saveTelemetryToDatabase(telemetryData) {
    try {
        const result = db.db.prepare(`
            INSERT INTO telemetry (vehicle_id, timestamp, lat, lng, speed, battery, temperature, rpm) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        `).run(
            telemetryData.vehicle_id,
            telemetryData.timestamp,
            telemetryData.lat,
            telemetryData.lng,
            telemetryData.speed,
            telemetryData.battery,
            telemetryData.temperature,
            telemetryData.rpm
        );
        
        return { success: true, id: result.lastInsertRowid };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', error);
        return { success: false, error: error.message };
    }
}

function updateVehicleInfo(vehicleId, info) {
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç–µ—Ö–Ω–∏–∫–µ
        db.db.prepare(`
            INSERT INTO vehicles (id, name, status, last_seen) 
            VALUES (?, ?, ?, ?)
            ON CONFLICT(id) DO UPDATE SET 
                name = excluded.name,
                status = excluded.status,
                last_seen = excluded.last_seen
        `).run(vehicleId, info.name, info.status, info.last_seen);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Ö–Ω–∏–∫–µ:', error);
    }
}

function updateVehicleHealth(vehicleId, healthData) {
    // –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å—Ö–µ–º—É –ë–î –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–¥–æ—Ä–æ–≤—å–µ
    console.log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è ${vehicleId} (uptime: ${healthData.system?.uptime}s)`);
}

function updateVehicleConnectionStatus(vehicleId, status, rssi) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log(`üíæ –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${vehicleId}: ${status} (RSSI: ${rssi})`);
}

function logAlert(vehicleId, level, message, priority) {
    // –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const timestamp = new Date().toISOString();
    console.log(`üìù [${timestamp}] ${level} - ${vehicleId}: ${message} (${priority})`);
}

function convertLegacyToV2(legacyData) {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –Ω–æ–≤—ã–π
    return {
        vehicle_id: legacyData.id || legacyData.vehicle_id,
        lat: legacyData.lat,
        lng: legacyData.lng,
        speed: legacyData.speed,
        battery: legacyData.battery,
        temperature: legacyData.temperature,
        rpm: legacyData.rpm,
        status: legacyData.status
    };
}

function printMessageStats() {
    console.log('');
    console.log('üìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===');
    console.log(`üìä –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è: ${messageStats.telemetry}`);
    console.log(`üìç GPS: ${messageStats.gps}`);
    console.log(`üîß –î–∞—Ç—á–∏–∫–∏: ${messageStats.sensors}`);
    console.log(`üíì –ó–¥–æ—Ä–æ–≤—å–µ: ${messageStats.health}`);
    console.log(`üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${messageStats.connection}`);
    console.log(`‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${messageStats.alerts}`);
    console.log(`üöó Legacy: ${messageStats.legacy}`);
    console.log(`üìà –í—Å–µ–≥–æ: ${messageStats.total}`);
    console.log('==============================');
    console.log('');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
client.on('error', (error) => {
    console.error('‚ùå MQTT –û—à–∏–±–∫–∞:', error.message);
});

client.on('close', () => {
    console.log('üì° MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
});

client.on('disconnect', () => {
    console.log('üì° MQTT –æ—Ç–∫–ª—é—á–µ–Ω');
});

client.on('reconnect', () => {
    console.log('üîÑ MQTT –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
});

// –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
    if (messageStats.total > 0) {
        printMessageStats();
    }
}, 300000);

console.log('üöÄ MQTT Collector v2.0 –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...');