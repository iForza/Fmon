import { ref, computed, onUnmounted, getCurrentInstance } from 'vue'

// API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤–º–µ—Å—Ç–æ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ MQTT
interface VehicleData {
  id: string
  name: string
  lat: number
  lng: number
  speed: number
  status: string
  timestamp: Date
  lastUpdate: Date
  battery?: number
  temperature?: number
  rpm?: number
}

interface ApiResponse<T> {
  success?: boolean
  data?: T
  count?: number
  status?: string
  database?: string
}

export const useApi = () => {
  const vehicles = ref<Map<string, VehicleData>>(new Map())
  const isConnected = ref(false)
  const isLoading = ref(false)
  const error = ref<string | null>(null)
  const wsConnection = ref<WebSocket | null>(null)
  
  // –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è polling
  let pollingInterval: NodeJS.Timeout | null = null
  let reconnectTimeout: NodeJS.Timeout | null = null
  let lastTimestamp = ref<number>(0)
  let pollingSpeed = ref<number>(5000) // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å 5 —Å–µ–∫—É–Ω–¥
  let consecutiveEmptyResponses = ref<number>(0) // –°—á–µ—Ç—á–∏–∫ –ø—É—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
  let hasActiveVehicles = ref<boolean>(false) // –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏–∫–∏

  // API –±–∞–∑–æ–≤—ã–π URL - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å –ë–î –Ω–∞ –ø–æ—Ä—Ç—É 3001
  const getApiBase = () => {
    if (process.client) {
      // –í –±—Ä–∞—É–∑–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Ö–æ—Å—Ç —Å –ø–æ—Ä—Ç–æ–º 3001
      return `${window.location.protocol}//${window.location.hostname}:3001/api`
    } else {
      // –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost
      return 'http://127.0.0.1:3001/api'
    }
  }
  const apiBase = getApiBase()

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
  const fetchVehicles = async (): Promise<VehicleData[]> => {
    try {
      isLoading.value = true
      error.value = null

      const response = await $fetch<ApiResponse<VehicleData[]>>(`${apiBase}/vehicles`)
      
      if (response.data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        vehicles.value.clear()
        response.data.forEach(vehicle => {
          vehicles.value.set(vehicle.id, {
            ...vehicle,
            timestamp: new Date(vehicle.timestamp),
            lastUpdate: new Date(vehicle.lastUpdate || vehicle.timestamp)
          })
        })
        return response.data
      }
      return []
    } catch (err: any) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Ö–Ω–∏–∫–µ'
      console.error('API Error (vehicles):', err)
      return []
    } finally {
      isLoading.value = false
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ (delta-–∑–∞–ø—Ä–æ—Å)
  const fetchTelemetryDelta = async () => {
    try {
      const response = await $fetch<ApiResponse<any[]> & { lastTimestamp?: number }>(`${apiBase}/telemetry/delta?since=${lastTimestamp.value}`)
      const telemetryData = response.data || []
      
      // –û–±–Ω–æ–≤–ª—è–µ–º lastTimestamp –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      if (response.lastTimestamp) {
        lastTimestamp.value = response.lastTimestamp
      }
      
      return { data: telemetryData, count: telemetryData.length }
    } catch (err: any) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è delta —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏'
      console.error('API Error (delta telemetry):', err)
      return { data: [], count: 0 }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ (–ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–∞–∫ fallback)
  const fetchTelemetry = async () => {
    try {
      const response = await $fetch<ApiResponse<any[]>>(`${apiBase}/telemetry/latest`)
      const telemetryData = response.data || []
      
      if (Array.isArray(telemetryData)) {
        console.log(`üì° –û–±—Ä–∞–±–æ—Ç–∫–∞ ${telemetryData.length} –∑–∞–ø–∏—Å–µ–π —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏`)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Å –Ω–æ–≤–æ–π —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–µ–π
        telemetryData.forEach(item => {
          if (item.vehicle_id) {
            console.log(`üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ ${item.vehicle_id}:`, {
              lat: item.lat,
              lng: item.lng, 
              speed: item.speed,
              status: (item.speed > 0) ? 'active' : 'stopped',
              battery: item.battery,
              temperature: item.temperature
            })
            
            const existing = vehicles.value.get(item.vehicle_id) || {
              id: item.vehicle_id,
              name: item.vehicle_name || `ESP32 ${item.vehicle_id}`,
              status: 'stopped'
            }

            const updated: VehicleData = {
              ...existing,
              id: item.vehicle_id,
              name: item.vehicle_name || existing.name,
              lat: parseFloat(item.lat) || 0,
              lng: parseFloat(item.lng) || 0,
              speed: parseFloat(item.speed) || 0,
              battery: item.battery ? parseFloat(item.battery) : undefined,
              temperature: item.temperature ? parseFloat(item.temperature) : undefined,
              rpm: item.rpm ? parseInt(item.rpm) : undefined,
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç ESP32)
              status: (parseFloat(item.speed) || 0) > 0 ? 'active' : 'stopped',
              timestamp: new Date(item.timestamp),
              lastUpdate: new Date(item.timestamp)
            }

            vehicles.value.set(item.vehicle_id, updated)
          }
        })

        // –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const updatedVehicles = new Map(vehicles.value)
        if (updatedVehicles.size !== vehicles.value.size || telemetryData.length > 0) {
          vehicles.value = updatedVehicles
        }
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ—Ö–Ω–∏–∫–∏: ${vehicles.value?.size || 0}`)
      }
      
      return telemetryData
    } catch (err: any) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏'
      console.error('API Error (telemetry):', err)
      return []
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
  const checkApiStatus = async () => {
    try {
      const response = await $fetch<ApiResponse<any>>(`${apiBase}/status`)
      isConnected.value = response.status === 'API Server running with SQLite'
      return response
    } catch (err: any) {
      isConnected.value = false
      error.value = err.message || 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      return null
    }
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  const connectWebSocket = () => {
    if (process.client) {
      try {
        const wsUrl = `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.host}/ws`
        wsConnection.value = new WebSocket(wsUrl)

        wsConnection.value.onopen = () => {
          console.log('‚úÖ WebSocket connected')
        }

        wsConnection.value.onmessage = (event) => {
          try {
            const data = JSON.parse(event.data)
            console.log('üì° WebSocket data:', data)
            
            if (data.type === 'vehicle_update' && data.data) {
              const vehicle = data.data
              vehicles.value.set(vehicle.id, {
                ...vehicle,
                timestamp: new Date(vehicle.timestamp),
                lastUpdate: new Date()
              })
              vehicles.value = new Map(vehicles.value)
            }
          } catch (err) {
            console.error('WebSocket message error:', err)
          }
        }

        wsConnection.value.onclose = () => {
          console.log('‚ùå WebSocket disconnected')
          // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π timeout –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
          if (reconnectTimeout) {
            clearTimeout(reconnectTimeout)
          }
          // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
          reconnectTimeout = setTimeout(connectWebSocket, 5000)
        }

        wsConnection.value.onerror = (err) => {
          console.error('WebSocket error:', err)
        }
      } catch (err) {
        console.error('WebSocket connection failed:', err)
      }
    }
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket
  const disconnectWebSocket = () => {
    if (wsConnection.value) {
      wsConnection.value.close()
      wsConnection.value = null
    }
    
    // –û—á–∏—â–∞–µ–º timeout –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (reconnectTimeout) {
      clearTimeout(reconnectTimeout)
      reconnectTimeout = null
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const initialize = async () => {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API
    await checkApiStatus()
    
    if (isConnected.value) {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ SQLite
      console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ SQLite...')
      await fetchVehicles()
      
      // –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      console.log('üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ ESP32...')
      await fetchTelemetry()
      
      console.log(`‚úÖ API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –¢–µ—Ö–Ω–∏–∫–∏: ${vehicles.value?.size || 0}`)
    } else {
      console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ polling
  const calculatePollingSpeed = (dataCount: number, hasActive: boolean) => {
    if (dataCount === 0) {
      consecutiveEmptyResponses.value++
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
      if (consecutiveEmptyResponses.value > 3) {
        return Math.min(15000, pollingSpeed.value * 1.5) // –ú–∞–∫—Å–∏–º—É–º 15 —Å–µ–∫—É–Ω–¥
      }
    } else {
      consecutiveEmptyResponses.value = 0
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ - —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –∏–Ω–∞—á–µ - —Ä–µ–∂–µ
      return hasActive ? 2000 : 8000
    }
    return pollingSpeed.value
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
  const startPolling = () => {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π polling –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    stopPolling()
    
    const performPolling = async () => {
      if (!isConnected.value) return
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º delta-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        const deltaResult = await fetchTelemetryDelta()
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏
        hasActiveVehicles.value = Array.from(vehicles.value.values()).some(v => 
          v.status === 'active' || (v.speed || 0) > 0
        )
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å polling
        const newSpeed = calculatePollingSpeed(deltaResult.count, hasActiveVehicles.value)
        
        if (newSpeed !== pollingSpeed.value) {
          pollingSpeed.value = newSpeed
          console.log(`üîÑ –°–∫–æ—Ä–æ—Å—Ç—å polling –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${pollingSpeed.value}ms`)
          
          // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º polling —Å –Ω–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
          stopPolling()
          pollingInterval = setTimeout(performPolling, pollingSpeed.value)
          return
        }
        
      } catch (err) {
        console.error('Polling error:', err)
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback - –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        await fetchTelemetry()
      }
      
      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
      pollingInterval = setTimeout(performPolling, pollingSpeed.value)
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    performPolling()

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç)
    if (getCurrentInstance()) {
      onUnmounted(() => {
        stopPolling()
        disconnectWebSocket()
      })
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    return stopPolling
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling (—Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å setTimeout)
  const stopPolling = () => {
    if (pollingInterval) {
      clearTimeout(pollingInterval)
      pollingInterval = null
    }
  }

  // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  const cleanup = () => {
    stopPolling()
    disconnectWebSocket()
  }

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  const allVehicles = computed(() => Array.from(vehicles.value.values()))
  const activeVehicles = computed(() => {
    const now = Date.now()
    return allVehicles.value.filter(v => {
      // –°—á–∏—Ç–∞–µ–º —Ç–µ—Ö–Ω–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ–π –µ—Å–ª–∏:
      // 1. –°—Ç–∞—Ç—É—Å —è–≤–Ω–æ 'active' (ESP32 –ø–µ—Ä–µ–¥–∞—ë—Ç —ç—Ç–æ –ø–æ–ª–µ)
      // 2. –ò–õ–ò —Å–∫–æ—Ä–æ—Å—Ç—å –±–æ–ª—å—à–µ 0
      // 3. –ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –º–µ–Ω–µ–µ 60 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥ (—Ç–µ—Ö–Ω–∏–∫–∞ –æ–Ω–ª–∞–π–Ω)
      const hasActiveStatus = v.status === 'active'
      const isMoving = (v.speed || 0) > 0
      const isOnline = v.lastUpdate && (now - new Date(v.lastUpdate).getTime()) < 60000 // 1 –º–∏–Ω—É—Ç–∞
      
      console.log(`üöú ${v.id}: status=${v.status}, speed=${v.speed}, online=${isOnline}, active=${hasActiveStatus || isMoving}`)
      
      return (hasActiveStatus || isMoving) && isOnline
    }).length
  })

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    vehicles,
    isConnected,
    isLoading,
    error,
    
    // –ú–µ—Ç–æ–¥—ã
    fetchVehicles,
    fetchTelemetry,
    fetchTelemetryDelta,
    checkApiStatus,
    initialize,
    startPolling,
    stopPolling,
    connectWebSocket,
    disconnectWebSocket,
    cleanup,
    
    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    allVehicles,
    activeVehicles
  }
} 