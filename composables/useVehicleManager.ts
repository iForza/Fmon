import { ref, computed, onUnmounted, watch, getCurrentInstance } from 'vue'
import { useApi } from './useApi'
import { useTime } from './useTime'

// –¢–∏–ø—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤
export enum VehicleStatus {
  ONLINE = 'online',       // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ < 30 —Å–µ–∫
  IDLE = 'idle',           // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ < 2 –º–∏–Ω, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏  
  DISCONNECTED = 'disconnected', // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö > 2 –º–∏–Ω
  ERROR = 'error'          // –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
}

export interface ManagedVehicle {
  id: string
  name: string
  lat: number
  lng: number
  speed: number
  battery?: number
  temperature?: number
  rpm?: number
  status: VehicleStatus
  lastUpdate: Date
  isActive: boolean
  connectionDuration: number
}

// Singleton —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race conditions
let vehicleManagerInstance: any = null
let isInitializing = false
let isInitialized = false
let watcherUnsubscribe: any = null

export const useVehicleManager = () => {
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  if (vehicleManagerInstance) {
    return vehicleManagerInstance
  }
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const activeVehicles = ref<Map<string, ManagedVehicle>>(new Map())
  const inactiveVehicles = ref<Map<string, ManagedVehicle>>(new Map())
  const selectedVehicleId = ref<string | null>(null)
  
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
  let cleanupInterval: NodeJS.Timeout | null = null
  
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
  const ONLINE_THRESHOLD = 30000   // 30 —Å–µ–∫—É–Ω–¥ (–±—ã–ª–æ 10)
  const IDLE_THRESHOLD = 120000    // 2 –º–∏–Ω—É—Ç—ã (–±—ã–ª–æ 30 —Å–µ–∫)
  const CLEANUP_INTERVAL = 15000   // 15 —Å–µ–∫—É–Ω–¥
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
  const api = useApi()
  const { formatTime, getRelativeTime } = useTime()
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const getVehicleStatus = (lastUpdate: Date): VehicleStatus => {
    const now = Date.now()
    const timeDiff = now - lastUpdate.getTime()
    
    if (timeDiff < ONLINE_THRESHOLD) {
      return VehicleStatus.ONLINE
    } else if (timeDiff < IDLE_THRESHOLD) {
      return VehicleStatus.IDLE
    } else {
      return VehicleStatus.DISCONNECTED
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
  const processVehicleData = (apiVehicles: any[]) => {
    const now = Date.now()
    
    apiVehicles.forEach(vehicle => {
      const lastUpdate = new Date(vehicle.lastUpdate || vehicle.timestamp)
      const status = getVehicleStatus(lastUpdate)
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      const managedVehicle: ManagedVehicle = {
        id: vehicle.id,
        name: vehicle.name,
        lat: vehicle.lat || 0,
        lng: vehicle.lng || 0,
        speed: vehicle.speed || 0,
        battery: vehicle.battery,
        temperature: vehicle.temperature,
        rpm: vehicle.rpm,
        status,
        lastUpdate,
        isActive: (vehicle.speed || 0) > 0,
        connectionDuration: now - lastUpdate.getTime()
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–¥–µ —Ä–∞–∑–º–µ—â–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      if (status === VehicleStatus.DISCONNECTED) {
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
        activeVehicles.value.delete(vehicle.id)
        inactiveVehicles.value.set(vehicle.id, managedVehicle)
      } else {
        // –†–∞–∑–º–µ—â–∞–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
        if (inactiveVehicles.value.has(vehicle.id)) {
          inactiveVehicles.value.delete(vehicle.id)
        }
        activeVehicles.value.set(vehicle.id, managedVehicle)
      }
    })
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activeVehicles.value = new Map(activeVehicles.value)
    inactiveVehicles.value = new Map(inactiveVehicles.value)
  }
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  const cleanupOldDevices = () => {
    const now = Date.now()
    const MAX_INACTIVE_TIME = 300000 // 5 –º–∏–Ω—É—Ç
    
    inactiveVehicles.value.forEach((vehicle, id) => {
      if (now - vehicle.lastUpdate.getTime() > MAX_INACTIVE_TIME) {
        inactiveVehicles.value.delete(id)
      }
    })
    
    inactiveVehicles.value = new Map(inactiveVehicles.value)
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç race conditions
  const initialize = async () => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if (isInitializing || isInitialized) {
      console.log('‚ö†Ô∏è VehicleManager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...')
      return
    }
    
    isInitializing = true
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VehicleManager...')
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      if (!api.isInitialized) {
        await api.initialize()
        api.startPolling()
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
      if (!cleanupInterval) {
        cleanupInterval = setInterval(() => {
          cleanupOldDevices()
        }, CLEANUP_INTERVAL)
      }
      
      // –°–æ–∑–¥–∞–µ–º watcher —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
      if (!watcherUnsubscribe) {
        watcherUnsubscribe = watch(
          () => api.allVehicles.value,
          (newVehicles) => {
            if (newVehicles.length > 0) {
              processVehicleData(newVehicles)
            }
          },
          { immediate: true, deep: true }
        )
      }
      
      isInitialized = true
      console.log('‚úÖ VehicleManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VehicleManager:', error)
    } finally {
      isInitializing = false
    }
  }
  
  // –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const selectVehicle = (vehicleId: string) => {
    selectedVehicleId.value = vehicleId
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const getSelectedVehicle = computed(() => {
    if (!selectedVehicleId.value) return null
    return activeVehicles.value.get(selectedVehicleId.value) || null
  })
  
  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  const allActiveVehicles = computed(() => Array.from(activeVehicles.value.values()))
  const allInactiveVehicles = computed(() => Array.from(inactiveVehicles.value.values()))
  const totalVehicles = computed(() => allActiveVehicles.value.length + allInactiveVehicles.value.length)
  const onlineVehicles = computed(() => allActiveVehicles.value.filter(v => v.status === VehicleStatus.ONLINE))
  const movingVehicles = computed(() => allActiveVehicles.value.filter(v => v.isActive))
  
  // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  const cleanup = () => {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ VehicleManager —Ä–µ—Å—É—Ä—Å–æ–≤')
    
    if (cleanupInterval) {
      clearInterval(cleanupInterval)
      cleanupInterval = null
    }
    
    if (watcherUnsubscribe) {
      watcherUnsubscribe()
      watcherUnsubscribe = null
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    isInitialized = false
    isInitializing = false
    
    api.cleanup()
  }
  
  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä VehicleManager
  vehicleManagerInstance = {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    activeVehicles: allActiveVehicles,
    inactiveVehicles: allInactiveVehicles,
    selectedVehicleId,
    
    // –ú–µ—Ç–æ–¥—ã
    initialize,
    selectVehicle,
    cleanup,
    
    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ
    selectedVehicle: getSelectedVehicle,
    totalVehicles,
    onlineVehicles,
    movingVehicles,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    formatTime,
    getRelativeTime,
    VehicleStatus,
    
    // –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    get isInitializing() { return isInitializing },
    get isInitialized() { return isInitialized }
  }
  
  // –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç)
  if (getCurrentInstance()) {
    onUnmounted(() => {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ VehicleManager —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏')
      cleanup()
    })
  }
  
  return vehicleManagerInstance
}