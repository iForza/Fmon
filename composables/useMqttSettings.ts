import { ref } from 'vue'

interface MqttSettings {
  url: string
  port: string
  username: string
  password: string
  clientId: string
  topics: string[]
}

interface ApiResponse {
  success: boolean
  error?: string
  connected?: boolean
  lastMessage?: string
  activeDevices?: number
}

export const useMqttSettings = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const connectionStatus = ref<'connected' | 'connecting' | 'disconnected' | 'error'>('disconnected')
  const lastMessageTime = ref<string | null>(null)
  const activeDevices = ref(0)
  const isInitialized = ref(false)

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å ESP32)
  const defaultSettings: MqttSettings = {
    url: 'wss://o0acf6a7.ala.dedicated.gcp.emqxcloud.com:8084/mqtt', // WebSocket –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
    port: '8084', // WebSocket port –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞  
    username: 'iforza', // –¢–µ –∂–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á—Ç–æ —É ESP32
    password: 'iforza',
    clientId: 'mapmon-web-' + Date.now(),
    topics: [
      'car', // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–ø–∏–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      'vehicles/+/telemetry', // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      'vehicles/+/status',
      'esp32/+/telemetry', // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ESP32
      'fleet/+/data' // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    ]
  }

  // –ö–ª—é—á –¥–ª—è localStorage
  const STORAGE_KEY = 'mapmon_mqtt_settings'

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ localStorage
  const loadSettings = (): MqttSettings | null => {
    if (!process.client) return null
    
    try {
      const saved = localStorage.getItem(STORAGE_KEY)
      if (saved) {
        const parsed = JSON.parse(saved)
        return { ...defaultSettings, ...parsed }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ MQTT:', error)
    }
    
    return null
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ localStorage
  const saveSettings = async (settings: MqttSettings): Promise<void> => {
    if (!process.client) return

    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(settings))
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
      await $fetch<ApiResponse>('/api/mqtt/config', {
        method: 'POST',
        body: settings
      })

      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ MQTT —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ MQTT:', error)
      throw error
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const testConnection = async (settings: MqttSettings): Promise<{ success: boolean; message: string }> => {
    try {
      connectionStatus.value = 'connecting'
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const response = await $fetch<ApiResponse>('/api/mqtt/test', {
        method: 'POST',
        body: settings
      })

      if (response.success) {
        connectionStatus.value = 'connected'
        return {
          success: true,
          message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
        }
      } else {
        connectionStatus.value = 'error'
        return {
          success: false,
          message: response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
        }
      }
    } catch (error: any) {
      connectionStatus.value = 'error'
      return {
        success: false,
        message: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ MQTT
  const getStatus = async () => {
    try {
      const response = await $fetch<ApiResponse>('/api/mqtt/status')
      
      if (response.success) {
        connectionStatus.value = response.connected ? 'connected' : 'disconnected'
        lastMessageTime.value = response.lastMessage || null
        activeDevices.value = response.activeDevices || 0
      }
      
      return response
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ MQTT:', error)
      connectionStatus.value = 'error'
    }
  }

  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const restartConnection = async (): Promise<boolean> => {
    try {
      const response = await $fetch<ApiResponse>('/api/mqtt/restart', {
        method: 'POST'
      })
      
      if (response.success) {
        connectionStatus.value = 'connecting'
        
        // –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        setTimeout(async () => {
          await getStatus()
        }, 3000)
        
        return true
      }
      
      return false
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ MQTT:', error)
      return false
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  const initialize = async () => {
    if (isInitialized.value) return
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const saved = loadSettings()
    if (saved) {
      console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MQTT –∏–∑ localStorage')
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    await getStatus()
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    if (process.client) {
      setInterval(getStatus, 10000) // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    }
    
    isInitialized.value = true
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  const getCurrentSettings = (): MqttSettings => {
    return loadSettings() || defaultSettings
  }

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    connectionStatus: readonly(connectionStatus),
    lastMessageTime: readonly(lastMessageTime),
    activeDevices: readonly(activeDevices),
    isInitialized: readonly(isInitialized),
    
    // –ú–µ—Ç–æ–¥—ã
    loadSettings,
    saveSettings,
    testConnection,
    getStatus,
    restartConnection,
    initialize,
    getCurrentSettings,
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    defaultSettings: readonly(defaultSettings)
  }
} 