// –ï–¥–∏–Ω—ã–π MQTT –∫–ª–∏–µ–Ω—Ç –¥–ª—è MapMon —Å WQTT.RU –±—Ä–æ–∫–µ—Ä–æ–º
import { ref, computed, onMounted, onUnmounted } from 'vue'
import mqtt from 'mqtt'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface MqttMessage {
  id: string
  timestamp: Date
  topic: string
  payload: any
  device_id?: string
  type: 'telemetry' | 'status' | 'heartbeat' | 'debug' | 'error'
}

interface MqttSettings {
  host: string
  port: number
  username: string
  password: string
  clientId: string
  topics: string[]
  useWebSocket: boolean
}

interface MqttStatistics {
  totalMessages: number
  connected: boolean
  lastMessageTime: Date | null
  activeDevices: Set<string>
  errors: number
  reconnectAttempts: number
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ MQTT –∫–ª–∏–µ–Ω—Ç–∞ (singleton)
let mqttClientInstance: any = null
let isInitializing = false

export const useMqttClient = () => {
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
  if (mqttClientInstance) {
    return mqttClientInstance
  }

  // –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  const client = ref<mqtt.MqttClient | null>(null)
  const isConnected = ref(false)
  const isConnecting = ref(false)
  const error = ref<string | null>(null)
  const messages = ref<MqttMessage[]>([])
  const statistics = ref<MqttStatistics>({
    totalMessages: 0,
    connected: false,
    lastMessageTime: null,
    activeDevices: new Set(),
    errors: 0,
    reconnectAttempts: 0
  })

  // WQTT.RU –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–µ–¥–∏–Ω—ã–µ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞)
  const defaultSettings = ref<MqttSettings>({
    host: 'm9.wqtt.ru',
    port: 20264,
    username: 'u_MZEPA5',
    password: 'L3YAUTS6',
    clientId: 'mapmon-web-' + Date.now(),
    topics: [
      'mapmon/vehicles/+/data/telemetry',
      'mapmon/vehicles/+/data/gps', 
      'mapmon/vehicles/+/data/sensors',
      'mapmon/vehicles/+/status/connection',
      'mapmon/vehicles/+/status/health',
      'car', // Legacy —Ç–æ–ø–∏–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      'vehicles/+/telemetry',
      'vehicles/+/status',
      'vehicles/+/heartbeat'
    ],
    useWebSocket: process.client // WebSocket —Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  })

  const settings = ref<MqttSettings>({ ...defaultSettings.value })

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É
  const connect = async (customSettings?: Partial<MqttSettings>) => {
    if (isConnecting.value || isConnected.value) {
      console.log('‚ö†Ô∏è MQTT —É–∂–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if (isInitializing) {
      console.log('‚ö†Ô∏è MQTT –∫–ª–∏–µ–Ω—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è')
      return
    }

    isInitializing = true
    isConnecting.value = true
    error.value = null

    try {
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (customSettings) {
        Object.assign(settings.value, customSettings)
      }

      console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WQTT.RU MQTT:', {
        host: settings.value.host,
        port: settings.value.port,
        clientId: settings.value.clientId,
        useWebSocket: settings.value.useWebSocket
      })

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
      const protocol = settings.value.useWebSocket ? 'wss' : 'mqtt'
      const brokerUrl = `${protocol}://${settings.value.host}:${settings.value.port}`

      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const connectOptions: mqtt.IClientOptions = {
        clientId: settings.value.clientId,
        username: settings.value.username,
        password: settings.value.password,
        keepalive: 60,
        reconnectPeriod: 5000,
        connectTimeout: 15000,
        clean: true,
        protocolVersion: 4
      }

      // WebSocket —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–ø—Ü–∏–∏
      if (settings.value.useWebSocket && process.client) {
        connectOptions.wsOptions = {
          headers: {
            'User-Agent': 'MapMon-WebClient/1.0'
          }
        }
      }

      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      client.value = mqtt.connect(brokerUrl, connectOptions)

      // –°–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      client.value.on('connect', () => {
        console.log('‚úÖ MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ WQTT.RU')
        isConnected.value = true
        isConnecting.value = false
        statistics.value.connected = true
        error.value = null

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫–∏
        subscribeToTopics()
      })

      client.value.on('message', handleMessage)

      client.value.on('error', (err) => {
        console.error('‚ùå MQTT –æ—à–∏–±–∫–∞:', err.message)
        error.value = err.message
        statistics.value.errors++
        isConnecting.value = false
      })

      client.value.on('disconnect', () => {
        console.log('üì° MQTT –æ—Ç–∫–ª—é—á–µ–Ω')
        isConnected.value = false
        statistics.value.connected = false
      })

      client.value.on('reconnect', () => {
        console.log('üîÑ MQTT –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...')
        statistics.value.reconnectAttempts++
      })

      client.value.on('close', () => {
        console.log('üîå MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ')
        isConnected.value = false
        statistics.value.connected = false
      })

    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MQTT:', err.message)
      error.value = err.message
      isConnecting.value = false
    } finally {
      isInitializing = false
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫–∏
  const subscribeToTopics = () => {
    if (!client.value || !isConnected.value) return

    settings.value.topics.forEach(topic => {
      client.value!.subscribe(topic, { qos: 0 }, (err) => {
        if (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${topic}:`, err.message)
        } else {
          console.log(`üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫: ${topic}`)
        }
      })
    })
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const handleMessage = (topic: string, payload: Buffer) => {
    try {
      const messageStr = payload.toString()
      console.log(`üì® MQTT —Å–æ–æ–±—â–µ–Ω–∏–µ [${topic}]:`, messageStr)

      let data: any
      try {
        data = JSON.parse(messageStr)
      } catch {
        // –ï—Å–ª–∏ –Ω–µ JSON, —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
        data = { value: messageStr }
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º device_id –∏–∑ —Ç–æ–ø–∏–∫–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö
      let deviceId = data.id || data.device_id || data.vehicle_id
      if (!deviceId && topic.includes('/')) {
        const parts = topic.split('/')
        if (parts.length >= 3 && parts[0] === 'mapmon' && parts[1] === 'vehicles') {
          deviceId = parts[2] // mapmon/vehicles/esp32_001/data/telemetry -> esp32_001
        } else if (parts.length >= 2 && parts[0] === 'vehicles') {
          deviceId = parts[1] // vehicles/esp32_001/telemetry -> esp32_001
        } else {
          deviceId = 'unknown'
        }
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
      let messageType: MqttMessage['type'] = 'debug'
      if (topic.includes('telemetry') || topic.includes('gps') || topic.includes('sensors')) {
        messageType = 'telemetry'
      } else if (topic.includes('status') || topic.includes('health') || topic.includes('connection')) {
        messageType = 'status'
      } else if (topic.includes('heartbeat')) {
        messageType = 'heartbeat'
      } else if (topic.includes('error') || topic.includes('alert')) {
        messageType = 'error'
      }

      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message: MqttMessage = {
        id: Date.now() + Math.random().toString(),
        timestamp: new Date(),
        topic,
        payload: data,
        device_id: deviceId,
        type: messageType
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 1000 —Å–æ–æ–±—â–µ–Ω–∏–π)
      messages.value.unshift(message)
      if (messages.value.length > 1000) {
        messages.value = messages.value.slice(0, 1000)
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      statistics.value.totalMessages++
      statistics.value.lastMessageTime = new Date()
      if (deviceId && deviceId !== 'unknown') {
        statistics.value.activeDevices.add(deviceId)
      }

    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MQTT —Å–æ–æ–±—â–µ–Ω–∏—è:', err.message)
      statistics.value.errors++
    }
  }

  // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  const publish = async (topic: string, payload: any, options: mqtt.IClientPublishOptions = {}) => {
    if (!client.value || !isConnected.value) {
      throw new Error('MQTT –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
    }

    const message = typeof payload === 'string' ? payload : JSON.stringify(payload)
    
    return new Promise<void>((resolve, reject) => {
      client.value!.publish(topic, message, options, (err) => {
        if (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ ${topic}:`, err.message)
          reject(err)
        } else {
          console.log(`üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ ${topic}:`, message)
          resolve()
        }
      })
    })
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  const disconnect = () => {
    if (client.value) {
      console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ MQTT –∫–ª–∏–µ–Ω—Ç–∞...')
      client.value.end()
      client.value = null
      isConnected.value = false
      statistics.value.connected = false
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  const clearMessages = () => {
    messages.value = []
    statistics.value.totalMessages = 0
    statistics.value.activeDevices.clear()
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const updateSettings = (newSettings: Partial<MqttSettings>) => {
    Object.assign(settings.value, newSettings)
    
    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    if (isConnected.value) {
      disconnect()
      setTimeout(() => connect(), 1000)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
  const getDeviceMessages = (deviceId: string) => {
    return messages.value.filter(msg => msg.device_id === deviceId)
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É
  const getMessagesByType = (type: MqttMessage['type'], limit = 100) => {
    return messages.value
      .filter(msg => msg.type === type)
      .slice(0, limit)
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  const cleanup = () => {
    disconnect()
    clearMessages()
  }

  // Computed —Å–≤–æ–π—Å—Ç–≤–∞
  const connectedDevices = computed(() => Array.from(statistics.value.activeDevices))
  const isHealthy = computed(() => isConnected.value && !error.value)
  const lastActivity = computed(() => statistics.value.lastMessageTime)

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
  mqttClientInstance = {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    client,
    isConnected,
    isConnecting, 
    error,
    messages,
    statistics,
    settings,
    
    // –ú–µ—Ç–æ–¥—ã
    connect,
    disconnect,
    publish,
    clearMessages,
    updateSettings,
    getDeviceMessages,
    getMessagesByType,
    cleanup,
    
    // Computed
    connectedDevices,
    isHealthy,
    lastActivity,
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    defaultSettings
  }

  return mqttClientInstance
}

// –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç)
export const useMqttClientWithCleanup = () => {
  const mqtt = useMqttClient()
  
  onUnmounted(() => {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ MQTT —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏')
    mqtt.cleanup()
  })
  
  return mqtt
}