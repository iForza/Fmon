#include <WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <WiFiClientSecure.h>

// WiFi –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const char* ssid = "Xiaomi12";
const char* password = "12345678";

// ===== WQTT.RU –ë—Ä–æ–∫–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ =====
const char* mqtt_server = "m9.wqtt.ru";
const int mqtt_port = 20264;                         // TCP
const int mqtt_tls_port = 20265;                     // TCP —Å TLS
const int mqtt_ws_tls_port = 20267;                  // WebSocket TLS
const char* mqtt_username = "u_MZEPA5";
const char* mqtt_password = "L3YAUTS6";
const char* mqtt_client_id = "ESP32_Car_2046";

// –¢–æ–ø–∏–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
const char* telemetry_topic = "mapmon/vehicles/ESP32_Car_2046/telemetry";
const char* status_topic = "mapmon/vehicles/ESP32_Car_2046/status";
const char* heartbeat_topic = "mapmon/vehicles/ESP32_Car_2046/heartbeat";

WiFiClient espClient;  
PubSubClient client(espClient);

// –°–∏–º—É–ª—è—Ü–∏—è GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è)
float base_lat = 55.7558;
float base_lng = 37.6176;
float current_lat = base_lat;
float current_lng = base_lng;

// –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫–∏
float speed = 0;
float battery = 85.5;
float temperature = 22.5;
int rpm = 0;
String status_str = "stopped";

// –¢–∞–π–º–µ—Ä—ã –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
unsigned long lastTelemetryMsg = 0;
unsigned long lastHeartbeatMsg = 0;
unsigned long lastReconnectAttempt = 0;
unsigned long lastWiFiCheck = 0;

const unsigned long TELEMETRY_INTERVAL = 5000;      // –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
const unsigned long HEARTBEAT_INTERVAL = 30000;     // Heartbeat –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
const unsigned long RECONNECT_INTERVAL = 3000;      // –ü–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
const unsigned long WIFI_CHECK_INTERVAL = 15000;    // –ü—Ä–æ–≤–µ—Ä–∫–∞ WiFi –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥

// –°—á–µ—Ç—á–∏–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
unsigned long messageCount = 0;
unsigned long reconnectCount = 0;
bool mqtt_connected = false;
unsigned long connectionTime = 0;

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("=========================================");
  Serial.println("      ESP32 WQTT.RU Fleet Monitor       ");
  Serial.println("=========================================");
  Serial.println("–ë–†–û–ö–ï–†: " + String(mqtt_server));
  Serial.println("–ü–û–†–¢: " + String(mqtt_port) + " (TCP)");
  Serial.println("–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: " + String(mqtt_username));
  Serial.println("Client ID: " + String(mqtt_client_id));
  Serial.println("");
  Serial.println("MQTT –¢–û–ü–ò–ö–ò:");
  Serial.println("  üìä –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è: " + String(telemetry_topic));
  Serial.println("  üì° –°—Ç–∞—Ç—É—Å: " + String(status_topic));
  Serial.println("  üíì Heartbeat: " + String(heartbeat_topic));
  Serial.println("  üîß –ö–æ–º–∞–Ω–¥—ã: mapmon/vehicles/" + String(mqtt_client_id) + "/commands");
  Serial.println("");
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WiFi
  setup_wifi();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MQTT –∫–ª–∏–µ–Ω—Ç–∞
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  client.setKeepAlive(120);             // Keep-alive 2 –º–∏–Ω—É—Ç—ã
  client.setSocketTimeout(15);          // –¢–∞–π–º–∞—É—Ç —Å–æ–∫–µ—Ç–∞ 15 —Å–µ–∫—É–Ω–¥
  
  Serial.println("üöÄ ESP32 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å WQTT.RU!");
  Serial.println("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ " + String(TELEMETRY_INTERVAL/1000) + " —Å–µ–∫—É–Ω–¥");
  Serial.println("üíì Heartbeat –∫–∞–∂–¥—ã–µ " + String(HEARTBEAT_INTERVAL/1000) + " —Å–µ–∫—É–Ω–¥");
  Serial.println("==========================================");
}

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi: ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 40) {
    delay(500);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("");
    Serial.println("‚úÖ WiFi –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
    Serial.print("üìç IP –∞–¥—Ä–µ—Å: ");
    Serial.println(WiFi.localIP());
    Serial.print("üì∂ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: ");
    Serial.print(WiFi.RSSI());
    Serial.println(" dBm");
    Serial.print("üîó Gateway: ");
    Serial.println(WiFi.gatewayIP());
    Serial.print("üåê DNS: ");
    Serial.println(WiFi.dnsIP());
  } else {
    Serial.println("");
    Serial.println("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: WiFi –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
    Serial.println("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSID –∏ –ø–∞—Ä–æ–ª—å WiFi!");
    Serial.println("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥...");
    delay(20000);
    ESP.restart();
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ [");
  Serial.print(topic);
  Serial.print("]: ");
  
  String message;
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  Serial.println(message);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  if (message == "stop") {
    speed = 0;
    status_str = "stopped";
    Serial.println("üõë –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ STOP");
  } else if (message == "start") {
    speed = random(10, 30);
    status_str = "active";
    Serial.println("‚ñ∂Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ START");
  } else if (message == "reboot") {
    Serial.println("üîÑ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ REBOOT - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫");
    delay(3000);
    ESP.restart();
  }
}

bool reconnect() {
  if (millis() - lastReconnectAttempt < RECONNECT_INTERVAL) {
    return false;
  }
  
  lastReconnectAttempt = millis();
  
  Serial.print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WQTT.RU (–ø–æ–ø—ã—Ç–∫–∞ #");
  Serial.print(++reconnectCount);
  Serial.print(")...");
  
  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π client ID —Å timestamp
  String clientId = String(mqtt_client_id) + "_" + String(millis());
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WQTT.RU —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
  if (client.connect(clientId.c_str(), mqtt_username, mqtt_password)) {
    Serial.println(" ‚úÖ –ü–û–î–ö–õ–Æ–ß–ï–ù –ö WQTT.RU!");
    
    mqtt_connected = true;
    reconnectCount = 0;
    connectionTime = millis();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    sendStatusMessage("connected");
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    String commandTopic = "mapmon/vehicles/" + String(mqtt_client_id) + "/commands";
    if (client.subscribe(commandTopic.c_str())) {
      Serial.println("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã: " + commandTopic);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π heartbeat
    sendHeartbeatMessage();
    
    Serial.println("üéâ –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö!");
    
    return true;
  } else {
    Serial.print(" ‚ùå –û–®–ò–ë–ö–ê, –∫–æ–¥: ");
    Serial.println(client.state());
    
    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫
    switch(client.state()) {
      case -4:
        Serial.println("    –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
        break;
      case -3:
        Serial.println("    –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ");
        break;
      case -2:
        Serial.println("    –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å");
        break;
      case -1:
        Serial.println("    –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω");
        break;
      case 1:
        Serial.println("    –ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞");
        break;
      case 2:
        Serial.println("    –ù–µ–≤–µ—Ä–Ω—ã–π Client ID");
        break;
      case 3:
        Serial.println("    –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        break;
      case 4:
        Serial.println("    –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
        break;
      case 5:
        Serial.println("    –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        break;
    }
    
    mqtt_connected = false;
    
    // –ï—Å–ª–∏ –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º—Å—è
    if (reconnectCount > 30) {
      Serial.println("üîÑ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...");
      delay(5000);
      ESP.restart();
    }
    
    return false;
  }
}

void sendTelemetryMessage() {
  if (!mqtt_connected) return;
  
  // –°–æ–∑–¥–∞–µ–º JSON –¥–æ–∫—É–º–µ–Ω—Ç
  StaticJsonDocument<500> doc;
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—á–∏–∫–∏
  simulateMovement();
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  doc["id"] = mqtt_client_id;
  doc["vehicle_id"] = mqtt_client_id;  // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API
  doc["lat"] = round(current_lat * 100000) / 100000.0;  // 5 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
  doc["lng"] = round(current_lng * 100000) / 100000.0;
  doc["speed"] = round(speed * 10) / 10.0;
  doc["status"] = status_str;
  doc["battery"] = round(battery * 100) / 100.0;
  doc["temperature"] = round(temperature * 10) / 10.0;
  doc["rpm"] = rpm;
  doc["timestamp"] = millis();
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  doc["messageCount"] = ++messageCount;
  doc["rssi"] = WiFi.RSSI();
  doc["freeHeap"] = ESP.getFreeHeap();
  doc["broker"] = "WQTT.RU";
  doc["uptime"] = millis() / 1000;
  doc["connectionTime"] = (millis() - connectionTime) / 1000;
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
  String payload;
  serializeJson(doc, payload);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å QoS 0 (–±—ã—Å—Ç—Ä–æ, –Ω–æ –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏)
  if (client.publish(telemetry_topic, payload.c_str(), false)) {
    Serial.println("üìä [" + String(messageCount) + "] –¢–ï–õ–ï–ú–ï–¢–†–ò–Ø ‚Üí WQTT.RU");
    Serial.println("    üìç " + String(current_lat, 5) + ", " + String(current_lng, 5) + 
                   " | üèÉ " + String(speed, 1) + " –∫–º/—á | üîã " + String(battery, 1) + 
                   "% | üå°Ô∏è " + String(temperature, 1) + "¬∞C | " + status_str);
    Serial.println("    üì° RSSI: " + String(WiFi.RSSI()) + " dBm | üß† RAM: " + String(ESP.getFreeHeap()) + " bytes");
  } else {
    Serial.println("‚ùå –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –¢–ï–õ–ï–ú–ï–¢–†–ò–ò! –ö–æ–¥: " + String(client.state()));
    mqtt_connected = false;
  }
}

void sendHeartbeatMessage() {
  if (!mqtt_connected) return;
  
  StaticJsonDocument<300> doc;
  doc["id"] = mqtt_client_id;
  doc["type"] = "heartbeat";
  doc["timestamp"] = millis();
  doc["uptime"] = millis() / 1000;
  doc["rssi"] = WiFi.RSSI();
  doc["freeHeap"] = ESP.getFreeHeap();
  doc["broker"] = "WQTT.RU";
  doc["messageCount"] = messageCount;
  doc["connectionTime"] = (millis() - connectionTime) / 1000;
  doc["reconnectCount"] = reconnectCount;
  
  String payload;
  serializeJson(doc, payload);
  
  if (client.publish(heartbeat_topic, payload.c_str(), false)) {
    Serial.println("üíì HEARTBEAT ‚Üí WQTT.RU (uptime: " + String(millis()/1000) + 
                   "s, msg: " + String(messageCount) + ", conn: " + 
                   String((millis() - connectionTime)/1000) + "s)");
  } else {
    Serial.println("‚ùå –û–®–ò–ë–ö–ê HEARTBEAT! –ö–æ–¥: " + String(client.state()));
    mqtt_connected = false;
  }
}

void sendStatusMessage(String status) {
  if (!client.connected()) return;
  
  StaticJsonDocument<200> doc;
  doc["id"] = mqtt_client_id;
  doc["status"] = status;
  doc["timestamp"] = millis();
  doc["rssi"] = WiFi.RSSI();
  doc["broker"] = "WQTT.RU";
  doc["uptime"] = millis() / 1000;
  
  String payload;
  serializeJson(doc, payload);
  
  if (client.publish(status_topic, payload.c_str(), true)) { // Retain = true –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    Serial.println("üì° –°–¢–ê–¢–£–° ‚Üí WQTT.RU: " + status);
  } else {
    Serial.println("‚ùå –û–®–ò–ë–ö–ê –°–¢–ê–¢–£–°–ê! –ö–æ–¥: " + String(client.state()));
  }
}

void simulateMovement() {
  static unsigned long lastMovement = 0;
  static int direction = 0; // 0-—Å–µ–≤–µ—Ä, 1-–≤–æ—Å—Ç–æ–∫, 2-—é–≥, 3-–∑–∞–ø–∞–¥
  static bool isMoving = false;
  static unsigned long movementStartTime = 0;
  
  // –ö–∞–∂–¥—ã–µ 25-45 —Å–µ–∫—É–Ω–¥ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
  unsigned long movementInterval = random(25000, 45000);
  
  if (millis() - lastMovement > movementInterval) {
    isMoving = !isMoving;
    lastMovement = millis();
    movementStartTime = millis();
    
    if (isMoving) {
      speed = random(10, 50); // –°–∫–æ—Ä–æ—Å—Ç—å 10-50 –∫–º/—á
      rpm = random(1500, 3500);
      status_str = "active";
      direction = random(0, 4);
      Serial.println("üöú –ù–∞—á–∏–Ω–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ: " + String(speed, 1) + " –∫–º/—á, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " + String(direction));
    } else {
      speed = 0;
      rpm = random(700, 1100); // –•–æ–ª–æ—Å—Ç–æ–π —Ö–æ–¥
      status_str = "stopped";
      Serial.println("‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ (–æ—Ç–¥—ã—Ö " + String(movementInterval/1000) + " —Å–µ–∫)");
    }
  }
  
  // –ï—Å–ª–∏ –¥–≤–∏–∂–µ–º—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  if (isMoving && speed > 0) {
    float timeSinceStart = (millis() - movementStartTime) / 1000.0; // —Å–µ–∫—É–Ω–¥—ã
    float movement = (speed / 3600.0) * (timeSinceStart / 111000.0); // –°–º–µ—â–µ–Ω–∏–µ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    
    switch (direction) {
      case 0: // –°–µ–≤–µ—Ä
        current_lat += movement * 0.0003;
        break;
      case 1: // –í–æ—Å—Ç–æ–∫
        current_lng += movement * 0.0003;
        break;
      case 2: // –Æ–≥
        current_lat -= movement * 0.0003;
        break;
      case 3: // –ó–∞–ø–∞–¥
        current_lng -= movement * 0.0003;
        break;
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–æ—Å–∫–≤—ã)
    current_lat = constrain(current_lat, base_lat - 0.025, base_lat + 0.025);
    current_lng = constrain(current_lng, base_lng - 0.025, base_lng + 0.025);
  }
  
  // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  if (isMoving) {
    battery -= random(1, 6) / 1000.0; // –†–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è –Ω–∞ 0.001-0.006% –∑–∞ —Ü–∏–∫–ª
    temperature += random(-10, 40) / 100.0; // –ù–∞–≥—Ä–µ–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ
  } else {
    battery -= random(1, 3) / 1000.0; // –ú–µ–¥–ª–µ–Ω–Ω–µ–µ —Ä–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è –≤ –ø–æ–∫–æ–µ
    temperature += random(-30, 10) / 100.0; // –û—Å—Ç—ã–≤–∞–µ—Ç
  }
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
  battery = constrain(battery, 15.0, 100.0);
  temperature = constrain(temperature, 20.0, 90.0);
  
  // –ï—Å–ª–∏ –±–∞—Ç–∞—Ä–µ—è –∫—Ä–∏—Ç–∏—á–Ω–æ –Ω–∏–∑–∫–∞—è
  if (battery < 20.0) {
    speed = 0;
    rpm = 0;
    status_str = "low_battery";
  }
}

void checkWiFiConnection() {
  if (millis() - lastWiFiCheck < WIFI_CHECK_INTERVAL) return;
  lastWiFiCheck = millis();
  
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå WiFi –æ—Ç–∫–ª—é—á–µ–Ω! –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: " + String(WiFi.RSSI()));
    Serial.println("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi...");
    mqtt_connected = false;
    setup_wifi();
  } else {
    // WiFi —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä–∏–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞
    int rssi = WiFi.RSSI();
    if (rssi < -80) {
      Serial.println("‚ö†Ô∏è –°–ª–∞–±—ã–π WiFi —Å–∏–≥–Ω–∞–ª: " + String(rssi) + " dBm");
    }
  }
}

void printSystemInfo() {
  static unsigned long lastSystemInfo = 0;
  
  // –ü–µ—á–∞—Ç–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
  if (millis() - lastSystemInfo > 120000) {
    lastSystemInfo = millis();
    
    Serial.println("");
    Serial.println("üîç === –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===");
    Serial.println("‚è∞ Uptime: " + String(millis() / 1000) + " —Å–µ–∫—É–Ω–¥");
    Serial.println("üîó MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: " + String((millis() - connectionTime) / 1000) + " —Å–µ–∫—É–Ω–¥");
    Serial.println("üìä –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + String(messageCount));
    Serial.println("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: " + String(reconnectCount));
    Serial.println("üì∂ WiFi RSSI: " + String(WiFi.RSSI()) + " dBm");
    Serial.println("üß† –°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å: " + String(ESP.getFreeHeap()) + " bytes");
    Serial.println("üîã –ë–∞—Ç–∞—Ä–µ—è —Å–∏–º—É–ª—è—Ü–∏–∏: " + String(battery, 1) + "%");
    Serial.println("===============================");
    Serial.println("");
  }
}

void loop() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º WiFi –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
  checkWiFiConnection();
  
  // –ü–µ—á–∞—Ç–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  printSystemInfo();
  
  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  if (!client.connected()) {
    mqtt_connected = false;
    if (reconnect()) {
      // –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å
    }
  } else {
    client.loop(); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    unsigned long now = millis();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é
    if (now - lastTelemetryMsg >= TELEMETRY_INTERVAL) {
      lastTelemetryMsg = now;
      sendTelemetryMessage();
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat
    if (now - lastHeartbeatMsg >= HEARTBEAT_INTERVAL) {
      lastHeartbeatMsg = now;
      sendHeartbeatMessage();
    }
  }
  
  // Watchdog –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
  delay(50);
}