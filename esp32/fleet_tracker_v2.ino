#include <WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <WiFiClientSecure.h>

// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
// WiFi –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const char* ssid = "Xiaomi12";
const char* password = "12345678";

// WQTT.RU –ë—Ä–æ–∫–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const char* mqtt_server = "m9.wqtt.ru";
const int mqtt_port = 20264;
const char* mqtt_username = "u_MZEPA5";
const char* mqtt_password = "L3YAUTS6";
const char* vehicle_id = "ESP32_Car_2046";

// ===== –¢–û–ü–ò–ö–ò MQTT v2.0 =====
// –ò—Å—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ (ESP32 ‚Üí –°–µ—Ä–≤–µ—Ä)
String topic_telemetry = "mapmon/vehicles/" + String(vehicle_id) + "/data/telemetry";
String topic_gps = "mapmon/vehicles/" + String(vehicle_id) + "/data/gps";
String topic_sensors = "mapmon/vehicles/" + String(vehicle_id) + "/data/sensors";
String topic_connection = "mapmon/vehicles/" + String(vehicle_id) + "/status/connection";
String topic_health = "mapmon/vehicles/" + String(vehicle_id) + "/status/health";
String topic_alerts_critical = "mapmon/vehicles/" + String(vehicle_id) + "/alerts/critical";
String topic_alerts_warnings = "mapmon/vehicles/" + String(vehicle_id) + "/alerts/warnings";

// –í—Ö–æ–¥—è—â–∏–µ –∫–æ–º–∞–Ω–¥—ã (–°–µ—Ä–≤–µ—Ä ‚Üí ESP32)
String topic_commands = "mapmon/vehicles/" + String(vehicle_id) + "/control/commands";
String topic_config = "mapmon/vehicles/" + String(vehicle_id) + "/control/config";
String topic_fleet_commands = "mapmon/fleet/commands";

// –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (legacy —Ç–æ–ø–∏–∫–∏)
String topic_legacy_car = "car";
String topic_legacy_telemetry = "vehicles/" + String(vehicle_id) + "/telemetry";

WiFiClient espClient;
PubSubClient client(espClient);

// ===== –î–ê–ù–ù–´–ï –£–°–¢–†–û–ô–°–¢–í–ê =====
// GPS –∏ –¥–≤–∏–∂–µ–Ω–∏–µ
float base_lat = 55.7558;
float base_lng = 37.6176;
float current_lat = base_lat;
float current_lng = base_lng;
float speed = 0;
float heading = 0;
float acceleration = 0;

// –î–≤–∏–≥–∞—Ç–µ–ª—å –∏ –ø–∏—Ç–∞–Ω–∏–µ
int rpm = 0;
String engine_status = "stopped";
float battery_voltage = 12.6;
float battery_current = 0;
float battery_percentage = 85.5;

// –û–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞
float temperature = 22.5;
float humidity = 60.0;

// –°–∏—Å—Ç–µ–º–∞
unsigned long system_uptime = 0;
int wifi_rssi = 0;
uint32_t free_memory = 0;
int mqtt_reconnects = 0;

// ===== –¢–ê–ô–ú–ï–†–´ –ò –ò–ù–¢–ï–†–í–ê–õ–´ =====
unsigned long lastTelemetryMsg = 0;
unsigned long lastGpsMsg = 0;
unsigned long lastSensorsMsg = 0;
unsigned long lastHealthMsg = 0;
unsigned long lastReconnectAttempt = 0;
unsigned long lastWiFiCheck = 0;
unsigned long lastMovementChange = 0;
unsigned long lastSystemInfo = 0;

const unsigned long TELEMETRY_INTERVAL = 5000;     // –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
const unsigned long GPS_INTERVAL_MOVING = 2000;    // GPS –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
const unsigned long GPS_INTERVAL_STOPPED = 10000;  // GPS –≤ –ø–æ–∫–æ–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
const unsigned long SENSORS_INTERVAL = 10000;      // –î–∞—Ç—á–∏–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
const unsigned long HEALTH_INTERVAL = 30000;       // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
const unsigned long RECONNECT_INTERVAL = 3000;     // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
const unsigned long WIFI_CHECK_INTERVAL = 15000;   // –ü—Ä–æ–≤–µ—Ä–∫–∞ WiFi –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
const unsigned long SYSTEM_INFO_INTERVAL = 120000; // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã

// ===== –°–ß–ï–¢–ß–ò–ö–ò –ò –°–û–°–¢–û–Ø–ù–ò–ï =====
unsigned long messageCount = 0;
unsigned long gpsMessageCount = 0;
unsigned long sensorMessageCount = 0;
unsigned long reconnectCount = 0;
bool mqtt_connected = false;
bool is_moving = false;
unsigned long connectionTime = 0;
int alertsCount_critical = 0;
int alertsCount_warnings = 0;
int alertsCount_info = 0;

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("==========================================");
  Serial.println("    ESP32 Fleet Tracker v2.0 (WQTT.RU)   ");
  Serial.println("==========================================");
  Serial.println("üöú Vehicle ID: " + String(vehicle_id));
  Serial.println("üåê MQTT Broker: " + String(mqtt_server) + ":" + String(mqtt_port));
  Serial.println("üë§ Username: " + String(mqtt_username));
  Serial.println("");
  Serial.println("üì° MQTT –¢–û–ü–ò–ö–ò v2.0:");
  Serial.println("  üìä Telemetry: " + topic_telemetry);
  Serial.println("  üìç GPS: " + topic_gps);
  Serial.println("  üîß Sensors: " + topic_sensors);
  Serial.println("  üíì Health: " + topic_health);
  Serial.println("  üîå Connection: " + topic_connection);
  Serial.println("  ‚ö†Ô∏è Alerts: " + topic_alerts_critical);
  Serial.println("  üéØ Commands: " + topic_commands);
  Serial.println("");
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WiFi
  setup_wifi();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MQTT
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  client.setKeepAlive(120);
  client.setSocketTimeout(15);
  
  Serial.println("üöÄ ESP32 Fleet Tracker v2.0 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
  Serial.println("==========================================");
}

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi: ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 40) {
    delay(500);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("");
    Serial.println("‚úÖ WiFi –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
    Serial.print("üìç IP: ");
    Serial.println(WiFi.localIP());
    Serial.print("üì∂ RSSI: ");
    Serial.print(WiFi.RSSI());
    Serial.println(" dBm");
  } else {
    Serial.println("");
    Serial.println("‚ùå –û–®–ò–ë–ö–ê: WiFi –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
    Serial.println("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥...");
    delay(20000);
    ESP.restart();
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  String topicStr = String(topic);
  String message;
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  
  Serial.println("üì® –ö–æ–º–∞–Ω–¥–∞ [" + topicStr + "]: " + message);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  if (topicStr == topic_commands || topicStr == topic_fleet_commands) {
    handleCommand(message);
  } else if (topicStr == topic_config) {
    handleConfig(message);
  }
}

void handleCommand(String command) {
  if (command == "start" || command == "start_engine") {
    speed = random(15, 35);
    rpm = random(1500, 2800);
    engine_status = "active";
    is_moving = true;
    Serial.println("‚ñ∂Ô∏è –ö–û–ú–ê–ù–î–ê: –ó–∞–ø—É—Å–∫ –¥–≤–∏–≥–∞—Ç–µ–ª—è");
    
  } else if (command == "stop" || command == "stop_engine") {
    speed = 0;
    rpm = random(700, 900);
    engine_status = "stopped";
    is_moving = false;
    Serial.println("üõë –ö–û–ú–ê–ù–î–ê: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è");
    
  } else if (command == "reboot" || command == "restart") {
    Serial.println("üîÑ –ö–û–ú–ê–ù–î–ê: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫");
    sendAlert("info", "–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏", "normal");
    delay(3000);
    ESP.restart();
    
  } else if (command == "status" || command == "health_check") {
    Serial.println("üìä –ö–û–ú–ê–ù–î–ê: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è");
    sendHealthMessage();
    
  } else if (command == "emergency_stop") {
    speed = 0;
    rpm = 0;
    engine_status = "emergency_stop";
    is_moving = false;
    Serial.println("üö® –ö–û–ú–ê–ù–î–ê: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞!");
    sendAlert("critical", "–í—ã–ø–æ–ª–Ω–µ–Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞", "high");
  }
}

void handleConfig(String config) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  Serial.println("‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: " + config);
  
  // –ü–∞—Ä—Å–∏–Ω–≥ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  StaticJsonDocument<200> doc;
  DeserializationError error = deserializeJson(doc, config);
  
  if (error) {
    Serial.println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
    return;
  }
  
  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  if (doc.containsKey("telemetry_interval")) {
    Serial.println("‚è±Ô∏è –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏: " + String(doc["telemetry_interval"].as<int>()));
  }
}

bool reconnect() {
  if (millis() - lastReconnectAttempt < RECONNECT_INTERVAL) {
    return false;
  }
  
  lastReconnectAttempt = millis();
  
  Serial.print("üîÑ MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–ø–æ–ø—ã—Ç–∫–∞ #" + String(++reconnectCount) + ")...");
  
  String clientId = String(vehicle_id) + "_" + String(millis());
  
  if (client.connect(clientId.c_str(), mqtt_username, mqtt_password)) {
    Serial.println(" ‚úÖ –ü–û–î–ö–õ–Æ–ß–ï–ù –ö WQTT.RU!");
    
    mqtt_connected = true;
    reconnectCount = 0;
    connectionTime = millis();
    
    // –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    client.subscribe(topic_commands.c_str());
    client.subscribe(topic_config.c_str());
    client.subscribe(topic_fleet_commands.c_str());
    Serial.println("üì° –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    sendConnectionStatus("connected");
    sendHealthMessage();
    
    return true;
  } else {
    Serial.print(" ‚ùå –û–®–ò–ë–ö–ê, –∫–æ–¥: ");
    Serial.println(client.state());
    mqtt_connected = false;
    
    if (reconnectCount > 30) {
      Serial.println("üîÑ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...");
      delay(5000);
      ESP.restart();
    }
    
    return false;
  }
}

void sendTelemetryMessage() {
  if (!mqtt_connected) return;
  
  StaticJsonDocument<600> doc;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
  updateSimulation();
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  doc["timestamp"] = millis();
  doc["vehicle_id"] = vehicle_id;
  
  // –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
  JsonObject location = doc.createNestedObject("location");
  location["lat"] = round(current_lat * 100000) / 100000.0;
  location["lng"] = round(current_lng * 100000) / 100000.0;
  location["altitude"] = random(150, 170);
  location["accuracy"] = random(2, 5);
  
  // –î–≤–∏–∂–µ–Ω–∏–µ
  JsonObject motion = doc.createNestedObject("motion");
  motion["speed"] = round(speed * 10) / 10.0;
  motion["heading"] = round(heading * 10) / 10.0;
  motion["acceleration"] = round(acceleration * 100) / 100.0;
  
  // –î–≤–∏–≥–∞—Ç–µ–ª—å
  JsonObject engine = doc.createNestedObject("engine");
  engine["rpm"] = rpm;
  engine["status"] = engine_status;
  engine["load"] = random(30, 85);
  
  // –ü–∏—Ç–∞–Ω–∏–µ
  JsonObject power = doc.createNestedObject("power");
  power["battery"] = round(battery_percentage * 100) / 100.0;
  power["voltage"] = round(battery_voltage * 10) / 10.0;
  power["current"] = round(battery_current * 10) / 10.0;
  
  // –û–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞
  JsonObject environment = doc.createNestedObject("environment");
  environment["temperature"] = round(temperature * 10) / 10.0;
  environment["humidity"] = round(humidity * 10) / 10.0;
  
  String payload;
  serializeJson(doc, payload);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é (QoS 1)
  if (client.publish(topic_telemetry.c_str(), payload.c_str(), false)) {
    messageCount++;
    Serial.println("üìä [" + String(messageCount) + "] –¢–ï–õ–ï–ú–ï–¢–†–ò–Ø ‚Üí WQTT.RU");
    Serial.println("    üìç " + String(current_lat, 5) + ", " + String(current_lng, 5) + 
                   " | üèÉ " + String(speed, 1) + " –∫–º/—á | üîã " + String(battery_percentage, 1) + 
                   "% | üå°Ô∏è " + String(temperature, 1) + "¬∞C | " + engine_status);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º legacy —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    sendLegacyTelemetry();
  } else {
    Serial.println("‚ùå –û–®–ò–ë–ö–ê –¢–ï–õ–ï–ú–ï–¢–†–ò–ò! –ö–æ–¥: " + String(client.state()));
    mqtt_connected = false;
  }
}

void sendGpsMessage() {
  if (!mqtt_connected) return;
  
  StaticJsonDocument<200> doc;
  doc["timestamp"] = millis();
  doc["vehicle_id"] = vehicle_id;
  doc["lat"] = round(current_lat * 100000) / 100000.0;
  doc["lng"] = round(current_lng * 100000) / 100000.0;
  doc["speed"] = round(speed * 10) / 10.0;
  doc["heading"] = round(heading * 10) / 10.0;
  
  String payload;
  serializeJson(doc, payload);
  
  if (client.publish(topic_gps.c_str(), payload.c_str(), false)) {
    gpsMessageCount++;
    Serial.println("üìç [" + String(gpsMessageCount) + "] GPS ‚Üí WQTT.RU");
  }
}

void sendSensorsMessage() {
  if (!mqtt_connected) return;
  
  StaticJsonDocument<300> doc;
  doc["timestamp"] = millis();
  doc["vehicle_id"] = vehicle_id;
  
  JsonObject sensors = doc.createNestedObject("sensors");
  sensors["fuel_level"] = random(20, 95);
  sensors["oil_pressure"] = random(2, 5);
  sensors["coolant_temp"] = random(80, 95);
  sensors["hydraulic_pressure"] = random(150, 200);
  
  JsonObject diagnostics = doc.createNestedObject("diagnostics");
  diagnostics["engine_hours"] = random(1200, 5000);
  diagnostics["service_due"] = false;
  diagnostics["error_codes"] = 0;
  
  String payload;
  serializeJson(doc, payload);
  
  if (client.publish(topic_sensors.c_str(), payload.c_str(), false)) {
    sensorMessageCount++;
    Serial.println("üîß [" + String(sensorMessageCount) + "] SENSORS ‚Üí WQTT.RU");
  }
}

void sendHealthMessage() {
  if (!mqtt_connected) return;
  
  StaticJsonDocument<400> doc;
  doc["timestamp"] = millis();
  doc["vehicle_id"] = vehicle_id;
  
  // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  JsonObject system = doc.createNestedObject("system");
  system["uptime"] = millis() / 1000;
  system["free_memory"] = ESP.getFreeHeap();
  system["cpu_usage"] = random(20, 60);
  system["wifi_rssi"] = WiFi.RSSI();
  system["mqtt_reconnects"] = reconnectCount;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤
  JsonObject sensors = doc.createNestedObject("sensors");
  sensors["gps_fix"] = true;
  sensors["temperature_sensor"] = "ok";
  sensors["battery_sensor"] = "ok";
  sensors["engine_sensor"] = "ok";
  
  // –°—á–µ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  JsonObject alerts_count = doc.createNestedObject("alerts_count");
  alerts_count["critical"] = alertsCount_critical;
  alerts_count["warnings"] = alertsCount_warnings;
  alerts_count["info"] = alertsCount_info;
  
  String payload;
  serializeJson(doc, payload);
  
  if (client.publish(topic_health.c_str(), payload.c_str(), true)) { // Retained
    Serial.println("üíì HEALTH ‚Üí WQTT.RU (uptime: " + String(millis()/1000) + "s)");
  }
}

void sendConnectionStatus(String status) {
  if (!client.connected() && status != "disconnected") return;
  
  StaticJsonDocument<150> doc;
  doc["timestamp"] = millis();
  doc["vehicle_id"] = vehicle_id;
  doc["status"] = status;
  doc["rssi"] = WiFi.RSSI();
  doc["broker"] = "WQTT.RU";
  
  String payload;
  serializeJson(doc, payload);
  
  if (client.publish(topic_connection.c_str(), payload.c_str(), true)) { // Retained
    Serial.println("üîå CONNECTION STATUS: " + status);
  }
}

void sendAlert(String level, String message, String priority) {
  if (!mqtt_connected) return;
  
  StaticJsonDocument<200> doc;
  doc["timestamp"] = millis();
  doc["vehicle_id"] = vehicle_id;
  doc["level"] = level;
  doc["message"] = message;
  doc["priority"] = priority;
  
  String payload;
  serializeJson(doc, payload);
  
  String alertTopic;
  if (level == "critical") {
    alertTopic = topic_alerts_critical;
    alertsCount_critical++;
  } else {
    alertTopic = topic_alerts_warnings;
    alertsCount_warnings++;
  }
  
  if (client.publish(alertTopic.c_str(), payload.c_str(), false)) {
    Serial.println("‚ö†Ô∏è ALERT [" + level + "]: " + message);
  }
}

void sendLegacyTelemetry() {
  // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
  StaticJsonDocument<300> doc;
  doc["id"] = vehicle_id;
  doc["vehicle_id"] = vehicle_id;
  doc["lat"] = current_lat;
  doc["lng"] = current_lng;
  doc["speed"] = speed;
  doc["status"] = engine_status;
  doc["battery"] = battery_percentage;
  doc["temperature"] = temperature;
  doc["rpm"] = rpm;
  doc["timestamp"] = millis();
  doc["messageCount"] = messageCount;
  doc["broker"] = "WQTT.RU";
  
  String payload;
  serializeJson(doc, payload);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ legacy —Ç–æ–ø–∏–∫–∏
  client.publish(topic_legacy_car.c_str(), payload.c_str(), false);
  client.publish(topic_legacy_telemetry.c_str(), payload.c_str(), false);
}

void updateSimulation() {
  static unsigned long lastMovement = 0;
  static int direction = 0;
  static bool wasMoving = false;
  static unsigned long movementStartTime = 0;
  
  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 25-45 —Å–µ–∫—É–Ω–¥
  unsigned long movementInterval = random(25000, 45000);
  
  if (millis() - lastMovement > movementInterval) {
    is_moving = !is_moving;
    lastMovement = millis();
    movementStartTime = millis();
    
    if (is_moving) {
      speed = random(10, 50);
      rpm = random(1500, 3500);
      engine_status = "active";
      direction = random(0, 4);
      heading = direction * 90 + random(-30, 30);
      acceleration = random(5, 15) / 10.0;
      Serial.println("üöú –ù–∞—á–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è: " + String(speed, 1) + " –∫–º/—á, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " + String(heading, 1) + "¬∞");
      
      if (!wasMoving) {
        sendAlert("info", "–¢–µ—Ö–Ω–∏–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–≤–∏–∂–µ–Ω–∏–µ", "normal");
      }
    } else {
      speed = 0;
      rpm = random(700, 1100);
      engine_status = "stopped";
      acceleration = 0;
      Serial.println("‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ (–æ—Ç–¥—ã—Ö " + String(movementInterval/1000) + " —Å–µ–∫)");
      
      if (wasMoving) {
        sendAlert("info", "–¢–µ—Ö–Ω–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "normal");
      }
    }
    wasMoving = is_moving;
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
  if (is_moving && speed > 0) {
    float timeSinceStart = (millis() - movementStartTime) / 1000.0;
    float movement = (speed / 3600.0) * (timeSinceStart / 111000.0);
    
    switch (direction) {
      case 0: current_lat += movement * 0.0003; break;  // –°–µ–≤–µ—Ä
      case 1: current_lng += movement * 0.0003; break;  // –í–æ—Å—Ç–æ–∫
      case 2: current_lat -= movement * 0.0003; break;  // –Æ–≥
      case 3: current_lng -= movement * 0.0003; break;  // –ó–∞–ø–∞–¥
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
    current_lat = constrain(current_lat, base_lat - 0.025, base_lat + 0.025);
    current_lng = constrain(current_lng, base_lng - 0.025, base_lng + 0.025);
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  if (is_moving) {
    battery_percentage -= random(1, 5) / 1000.0;
    battery_current = random(20, 45) / 10.0;
    temperature += random(-10, 40) / 100.0;
  } else {
    battery_percentage -= random(1, 2) / 1000.0;
    battery_current = random(5, 15) / 10.0;
    temperature += random(-30, 10) / 100.0;
  }
  
  battery_percentage = constrain(battery_percentage, 15.0, 100.0);
  battery_voltage = 11.5 + (battery_percentage / 100.0) * 1.5;
  temperature = constrain(temperature, 20.0, 90.0);
  humidity = constrain(humidity + random(-10, 10) / 10.0, 40.0, 80.0);
  
  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  if (battery_percentage < 20.0 && alertsCount_warnings < 3) {
    sendAlert("warning", "–ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏: " + String(battery_percentage, 1) + "%", "high");
  }
  
  if (temperature > 80.0 && alertsCount_warnings < 5) {
    sendAlert("warning", "–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(temperature, 1) + "¬∞C", "medium");
  }
}

void checkWiFiConnection() {
  if (millis() - lastWiFiCheck < WIFI_CHECK_INTERVAL) return;
  lastWiFiCheck = millis();
  
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå WiFi –æ—Ç–∫–ª—é—á–µ–Ω! –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
    mqtt_connected = false;
    setup_wifi();
  }
}

void printSystemInfo() {
  if (millis() - lastSystemInfo < SYSTEM_INFO_INTERVAL) return;
  lastSystemInfo = millis();
  
  Serial.println("");
  Serial.println("üîç === –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===");
  Serial.println("‚è∞ Uptime: " + String(millis() / 1000) + " —Å–µ–∫");
  Serial.println("üîó MQTT: " + String((millis() - connectionTime) / 1000) + " —Å–µ–∫");
  Serial.println("üìä –°–æ–æ–±—â–µ–Ω–∏–π: T=" + String(messageCount) + " G=" + String(gpsMessageCount) + " S=" + String(sensorMessageCount));
  Serial.println("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: " + String(reconnectCount));
  Serial.println("üì∂ WiFi RSSI: " + String(WiFi.RSSI()) + " dBm");
  Serial.println("üß† RAM: " + String(ESP.getFreeHeap()) + " bytes");
  Serial.println("‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: C=" + String(alertsCount_critical) + " W=" + String(alertsCount_warnings));
  Serial.println("===============================");
  Serial.println("");
}

void loop() {
  checkWiFiConnection();
  printSystemInfo();
  
  if (!client.connected()) {
    mqtt_connected = false;
    if (reconnect()) {
      // –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å
    }
  } else {
    client.loop();
    
    unsigned long now = millis();
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è
    if (now - lastTelemetryMsg >= TELEMETRY_INTERVAL) {
      lastTelemetryMsg = now;
      sendTelemetryMessage();
    }
    
    // GPS –¥–∞–Ω–Ω—ã–µ (—á–∞—Å—Ç–æ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–≤–∏–∂–µ–Ω–∏—è)
    unsigned long gpsInterval = is_moving ? GPS_INTERVAL_MOVING : GPS_INTERVAL_STOPPED;
    if (now - lastGpsMsg >= gpsInterval) {
      lastGpsMsg = now;
      sendGpsMessage();
    }
    
    // –î–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–æ–≤
    if (now - lastSensorsMsg >= SENSORS_INTERVAL) {
      lastSensorsMsg = now;
      sendSensorsMessage();
    }
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
    if (now - lastHealthMsg >= HEALTH_INTERVAL) {
      lastHealthMsg = now;
      sendHealthMessage();
    }
  }
  
  delay(50);
}