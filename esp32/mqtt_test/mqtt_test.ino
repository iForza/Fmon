#include <WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>

// WiFi –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const char* ssid = "Xiaomi12";
const char* password = "12345678";

// ===== Eclipse Mosquitto Test Broker –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ =====
const char* mqtt_server = "test.mosquitto.org";
const int mqtt_port = 1883;                      // TCP
const int mqtt_ssl_port = 8883;                  // TLS
const int mqtt_ws_port = 8080;                   // WebSocket
const int mqtt_wss_port = 8081;                  // WebSocket TLS
// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±—Ä–æ–∫–µ—Ä–∞
const char* mqtt_client_id = "ESP32_Car_2046";

// –¢–æ–ø–∏–∫–∏
const char* telemetry_topic = "car";
const char* status_topic = "vehicles/ESP32_Car_2046/status";
const char* heartbeat_topic = "vehicles/ESP32_Car_2046/heartbeat";

WiFiClient espClient;
PubSubClient client(espClient);

// –°–∏–º—É–ª—è—Ü–∏—è GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è)
float base_lat = 55.7558;
float base_lng = 37.6176;
float current_lat = base_lat;
float current_lng = base_lng;

// –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫–∏
float speed = 0;
float battery = 85.5; // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
float temperature = 22.5; // –ö–æ–º–Ω–∞—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
int rpm = 0;
String status_str = "stopped";

// –¢–∞–π–º–µ—Ä—ã
unsigned long lastTelemetryMsg = 0;
unsigned long lastHeartbeatMsg = 0;
unsigned long lastReconnectAttempt = 0;

// –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
const unsigned long TELEMETRY_INTERVAL = 3000;  // –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
const unsigned long HEARTBEAT_INTERVAL = 5000;   // Heartbeat –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
const unsigned long RECONNECT_INTERVAL = 5000;   // –ü–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
unsigned long messageCount = 0;
unsigned long reconnectCount = 0;

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("=================================");
  Serial.println("  ESP32 Mosquitto Fleet Monitor ");
  Serial.println("=================================");
  Serial.println("–ë—Ä–æ–∫–µ—Ä: " + String(mqtt_server));
  Serial.println("–ü–æ—Ä—Ç: " + String(mqtt_port) + " (TCP)");
  Serial.println("WebSocket: " + String(mqtt_ws_port));
  Serial.println("WebSocket TLS: " + String(mqtt_wss_port));
  Serial.println("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø");
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi
  setup_wifi();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MQTT
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  client.setKeepAlive(60); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º keep-alive
  
  Serial.println("ESP32 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
  Serial.println("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –∫–∞–∂–¥—ã–µ " + String(TELEMETRY_INTERVAL/1000) + " —Å–µ–∫—É–Ω–¥");
  Serial.println("Heartbeat –∫–∞–∂–¥—ã–µ " + String(HEARTBEAT_INTERVAL/1000) + " —Å–µ–∫—É–Ω–¥");
}

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi: ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("");
    Serial.println("‚úÖ WiFi –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
    Serial.print("IP –∞–¥—Ä–µ—Å: ");
    Serial.println(WiFi.localIP());
    Serial.print("–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: ");
    Serial.print(WiFi.RSSI());
    Serial.println(" dBm");
  } else {
    Serial.println("");
    Serial.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WiFi!");
    Serial.println("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...");
    delay(10000);
    ESP.restart();
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("üì® –ü–æ–ª—É—á–µ–Ω–æ [");
  Serial.print(topic);
  Serial.print("]: ");
  
  String message;
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  Serial.println(message);
}

bool reconnect() {
  if (millis() - lastReconnectAttempt < RECONNECT_INTERVAL) {
    return false; // –ï—â–µ —Ä–∞–Ω–æ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  }
  
  lastReconnectAttempt = millis();
  
  Serial.print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mosquitto (–ø–æ–ø—ã—Ç–∫–∞ #");
  Serial.print(++reconnectCount);
  Serial.print(")...");
  
  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π client ID —Å timestamp
  String clientId = String(mqtt_client_id) + "_" + String(millis());
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–ï–ó –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø—É–±–ª–∏—á–Ω—ã–π –±—Ä–æ–∫–µ—Ä)
  if (client.connect(clientId.c_str())) {
    Serial.println(" ‚úÖ –ü–û–î–ö–õ–Æ–ß–ï–ù –ö MOSQUITTO!");
    reconnectCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    sendStatusMessage("connected");
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    String commandTopic = "vehicles/" + String(mqtt_client_id) + "/commands";
    if (client.subscribe(commandTopic.c_str())) {
      Serial.println("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã: " + commandTopic);
    }
    
    return true;
  } else {
    Serial.print(" ‚ùå –û–®–ò–ë–ö–ê, –∫–æ–¥: ");
    Serial.println(client.state());
    
    // –ï—Å–ª–∏ –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º—Å—è
    if (reconnectCount > 10) {
      Serial.println("üîÑ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...");
      delay(5000);
      ESP.restart();
    }
    
    return false;
  }
}

void sendTelemetryMessage() {
  // –°–æ–∑–¥–∞–µ–º JSON –¥–æ–∫—É–º–µ–Ω—Ç
  StaticJsonDocument<300> doc;
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—á–∏–∫–∏
  simulateMovement();
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  doc["id"] = mqtt_client_id;
  doc["lat"] = current_lat;
  doc["lng"] = current_lng;
  doc["speed"] = speed;
  doc["status"] = status_str;
  doc["battery"] = round(battery * 100) / 100.0; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
  doc["temperature"] = round(temperature * 10) / 10.0; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞
  doc["rpm"] = rpm;
  doc["timestamp"] = millis();
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  doc["messageCount"] = ++messageCount;
  doc["rssi"] = WiFi.RSSI();
  doc["freeHeap"] = ESP.getFreeHeap();
  doc["broker"] = "Eclipse Mosquitto";
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
  String payload;
  serializeJson(doc, payload);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (client.publish(telemetry_topic, payload.c_str(), false)) { // QoS 0, –Ω–µ retain
    Serial.println("üìä –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è #" + String(messageCount) + " –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Mosquitto");
    Serial.println("   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: " + String(current_lat, 5) + ", " + String(current_lng, 5));
    Serial.println("   –°–∫–æ—Ä–æ—Å—Ç—å: " + String(speed) + " –∫–º/—á, –°—Ç–∞—Ç—É—Å: " + status_str);
    Serial.println("   –ë–∞—Ç–∞—Ä–µ—è: " + String(battery, 1) + "%, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(temperature, 1) + "¬∞C");
  } else {
    Serial.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏!");
  }
}

void sendHeartbeatMessage() {
  StaticJsonDocument<150> doc;
  doc["id"] = mqtt_client_id;
  doc["type"] = "heartbeat";
  doc["timestamp"] = millis();
  doc["uptime"] = millis() / 1000;
  doc["rssi"] = WiFi.RSSI();
  doc["freeHeap"] = ESP.getFreeHeap();
  doc["broker"] = "Eclipse Mosquitto";
  
  String payload;
  serializeJson(doc, payload);
  
  if (client.publish(heartbeat_topic, payload.c_str(), false)) {
    Serial.println("üíì Heartbeat –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Mosquitto (uptime: " + String(millis()/1000) + "s)");
  }
}

void sendStatusMessage(String status) {
  StaticJsonDocument<150> doc;
  doc["id"] = mqtt_client_id;
  doc["status"] = status;
  doc["timestamp"] = millis();
  doc["rssi"] = WiFi.RSSI();
  doc["broker"] = "Eclipse Mosquitto";
  
  String payload;
  serializeJson(doc, payload);
  
  if (client.publish(status_topic, payload.c_str(), true)) { // Retain = true –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    Serial.println("üì° –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Mosquitto: " + status);
  }
}

void simulateMovement() {
  static unsigned long lastMovement = 0;
  static int direction = 0; // 0-—Å–µ–≤–µ—Ä, 1-–≤–æ—Å—Ç–æ–∫, 2-—é–≥, 3-–∑–∞–ø–∞–¥
  static bool isMoving = false;
  static unsigned long movementStartTime = 0;
  
  // –ö–∞–∂–¥—ã–µ 15-25 —Å–µ–∫—É–Ω–¥ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
  unsigned long movementInterval = random(15000, 25000);
  
  if (millis() - lastMovement > movementInterval) {
    isMoving = !isMoving;
    lastMovement = millis();
    movementStartTime = millis();
    
    if (isMoving) {
      speed = random(5, 35); // –°–∫–æ—Ä–æ—Å—Ç—å 5-35 –∫–º/—á
      rpm = random(1200, 2800);
      status_str = "active";
      direction = random(0, 4);
      Serial.println("üöú –ù–∞—á–∏–Ω–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ: " + String(speed) + " –∫–º/—á, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " + String(direction));
    } else {
      speed = 0;
      rpm = random(700, 900); // –•–æ–ª–æ—Å—Ç–æ–π —Ö–æ–¥
      status_str = "stopped";
      Serial.println("‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞");
    }
  }
  
  // –ï—Å–ª–∏ –¥–≤–∏–∂–µ–º—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  if (isMoving && speed > 0) {
    // –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
    float timeInMovement = (millis() - movementStartTime) / 1000.0; // —Å–µ–∫—É–Ω–¥—ã
    float movement = (speed / 3600.0) * (timeInMovement / 111000.0); // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    
    switch (direction) {
      case 0: // –°–µ–≤–µ—Ä
        current_lat += movement * 0.0001;
        break;
      case 1: // –í–æ—Å—Ç–æ–∫
        current_lng += movement * 0.0001;
        break;
      case 2: // –Æ–≥
        current_lat -= movement * 0.0001;
        break;
      case 3: // –ó–∞–ø–∞–¥
        current_lng -= movement * 0.0001;
        break;
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–æ—Å–∫–≤—ã)
    current_lat = constrain(current_lat, base_lat - 0.01, base_lat + 0.01);
    current_lng = constrain(current_lng, base_lng - 0.01, base_lng + 0.01);
  }
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  if (isMoving) {
    battery -= random(1, 5) / 100.0; // –†–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è –Ω–∞ 0.01-0.05% –∑–∞ —Ü–∏–∫–ª
    temperature += random(-10, 30) / 100.0; // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –∫–æ–ª–µ–±–∞—Ç—å—Å—è
  } else {
    battery -= random(1, 2) / 100.0; // –ú–µ–¥–ª–µ–Ω–Ω–µ–µ —Ä–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è –≤ –ø–æ–∫–æ–µ
    temperature += random(-20, 10) / 100.0; // –û—Å—Ç—ã–≤–∞–µ—Ç
  }
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
  battery = constrain(battery, 5.0, 100.0); // –ù–µ –¥–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑—Ä—è–¥–∏—Ç—å—Å—è
  temperature = constrain(temperature, 15.0, 85.0); // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
  
  // –ï—Å–ª–∏ –±–∞—Ç–∞—Ä–µ—è –∫—Ä–∏—Ç–∏—á–Ω–æ –Ω–∏–∑–∫–∞—è, "–≤—ã–∫–ª—é—á–∞–µ–º" —Ç–µ—Ö–Ω–∏–∫—É
  if (battery < 10.0) {
    speed = 0;
    rpm = 0;
    status_str = "low_battery";
  }
}

void loop() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º WiFi –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå WiFi –æ—Ç–∫–ª—é—á–µ–Ω! –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
    setup_wifi();
    return;
  }
  
  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  if (!client.connected()) {
    if (reconnect()) {
      // –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å
    }
  } else {
    client.loop(); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    unsigned long now = millis();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é
    if (now - lastTelemetryMsg >= TELEMETRY_INTERVAL) {
      lastTelemetryMsg = now;
      sendTelemetryMessage();
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat
    if (now - lastHeartbeatMsg >= HEARTBEAT_INTERVAL) {
      lastHeartbeatMsg = now;
      sendHeartbeatMessage();
    }
  }
  
  delay(100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
} 
