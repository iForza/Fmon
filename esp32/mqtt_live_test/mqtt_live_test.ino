#include <WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>

// WiFi –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®–ò!
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

// MQTT –±—Ä–æ–∫–µ—Ä (–ø—É–±–ª–∏—á–Ω—ã–π test.mosquitto.org)
const char* mqtt_server = "test.mosquitto.org";
const int mqtt_port = 1883;  // TCP –ø–æ—Ä—Ç (–Ω–µ WebSocket!)
const char* device_id = "ESP32_Car_2046";

WiFiClient espClient;
PubSubClient client(espClient);

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
unsigned long lastMsg = 0;
unsigned long messageCount = 0;
float lat = 55.7558;  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã 
float lng = 37.6176;
int speed = 0;
float battery = 85.0;
float temperature = 25.0;
int rpm = 0;

void setup() {
  Serial.begin(115200);
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi
  setup_wifi();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MQTT
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  
  Serial.println("ESP32 MQTT Live Test –≥–æ—Ç–æ–≤!");
  Serial.println("–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ–ø–∏–∫–∏:");
  Serial.println("- car (—Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è)");
  Serial.println("- vehicles/ESP32_Car_2046/status");
  Serial.println("- vehicles/ESP32_Car_2046/heartbeat");
}

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi: ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi –ø–æ–¥–∫–ª—é—á–µ–Ω!");
  Serial.print("IP –∞–¥—Ä–µ—Å: ");
  Serial.println(WiFi.localIP());
  Serial.print("RSSI: ");
  Serial.println(WiFi.RSSI());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ [");
  Serial.print(topic);
  Serial.print("]: ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT...");
    
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX);
    
    if (client.connect(clientId.c_str())) {
      Serial.println(" –ø–æ–¥–∫–ª—é—á–µ–Ω!");
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      sendStatus();
      
    } else {
      Serial.print(" –æ—à–∏–±–∫–∞, rc=");
      Serial.print(client.state());
      Serial.println(" –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥");
      delay(5000);
    }
  }
}

void sendTelemetry() {
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏
  lat += (random(-100, 100) / 100000.0);  // –ù–µ–±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  lng += (random(-100, 100) / 100000.0);
  speed = random(0, 60);                   // –°–∫–æ—Ä–æ—Å—Ç—å 0-60 –∫–º/—á
  battery = 85.0 + random(-5, 5);          // –ë–∞—Ç–∞—Ä–µ—è 80-90%
  temperature = 25.0 + random(-5, 10);     // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 20-35¬∞C
  rpm = speed * 50 + random(-100, 100);    // RPM –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
  
  // –°–æ–∑–¥–∞–µ–º JSON –æ–±—ä–µ–∫—Ç
  StaticJsonDocument<400> doc;
  doc["id"] = device_id;
  doc["device_id"] = device_id;
  doc["vehicle_id"] = device_id;
  doc["lat"] = lat;
  doc["lng"] = lng;
  doc["speed"] = speed;
  doc["battery"] = battery;
  doc["temperature"] = temperature;
  doc["rpm"] = rpm;
  doc["timestamp"] = millis() / 1000;
  doc["messageCount"] = ++messageCount;
  doc["rssi"] = WiFi.RSSI();
  doc["freeHeap"] = ESP.getFreeHeap();
  doc["broker"] = "Eclipse Mosquitto";
  doc["status"] = (speed > 0) ? "active" : "stopped";
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
  String payload;
  serializeJson(doc, payload);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ–ø–∏–∫ "car" (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–ø–∏–∫ –¥–ª—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏)
  client.publish("car", payload.c_str());
  
  Serial.println("üì° –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:");
  Serial.println(payload);
}

void sendHeartbeat() {
  StaticJsonDocument<200> doc;
  doc["device_id"] = device_id;
  doc["uptime"] = millis() / 1000;
  doc["rssi"] = WiFi.RSSI();
  doc["freeHeap"] = ESP.getFreeHeap();
  doc["status"] = "online";
  
  String payload;
  serializeJson(doc, payload);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat
  String topic = "vehicles/" + String(device_id) + "/heartbeat";
  client.publish(topic.c_str(), payload.c_str());
  
  Serial.println("üíì Heartbeat –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: " + payload);
}

void sendStatus() {
  StaticJsonDocument<150> doc;
  doc["device_id"] = device_id;
  doc["status"] = "active";
  doc["rssi"] = WiFi.RSSI();
  doc["ip"] = WiFi.localIP().toString();
  
  String payload;
  serializeJson(doc, payload);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  String topic = "vehicles/" + String(device_id) + "/status";
  client.publish(topic.c_str(), payload.c_str());
  
  Serial.println("üìä –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: " + payload);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long now = millis();
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
  if (now - lastMsg > 3000) {
    lastMsg = now;
    
    sendTelemetry();
    
    // Heartbeat –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    if (messageCount % 5 == 0) {
      sendHeartbeat();
    }
    
    // –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥  
    if (messageCount % 10 == 0) {
      sendStatus();
    }
  }
  
  delay(100);
} 