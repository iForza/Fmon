/*
 * ESP32 MQTT Debug Test
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫–µ—Ç—á –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MapMon
 * 
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥:
 * - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—Å—Ç–∞—Ç–∏—á–Ω—ã–µ + –Ω–µ–±–æ–ª—å—à–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)
 * - –°–∫–æ—Ä–æ—Å—Ç—å (—Å–ª—É—á–∞–π–Ω–∞—è 0-30 –∫–º/—á)
 * - –ë–∞—Ç–∞—Ä–µ—è (—Å–ª—É—á–∞–π–Ω–∞—è 70-100%)
 * - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (—Å–ª—É—á–∞–π–Ω–∞—è 20-40¬∞C)
 * - RPM (—Å–ª—É—á–∞–π–Ω–∞—è 800-2500)
 * - –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 */

#include <WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>

// ===== –ù–ê–°–¢–†–û–ô–ö–ò WIFI =====
const char* ssid = "YOUR_WIFI_NAME";          // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à WiFi
const char* password = "YOUR_WIFI_PASSWORD";   // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø–∞—Ä–æ–ª—å WiFi

// ===== –ù–ê–°–¢–†–û–ô–ö–ò MQTT =====
const char* mqtt_server = "o0acf6a7.ala.dedicated.gcp.emqxcloud.com";
const int mqtt_port = 1883;
const char* mqtt_user = "iforza";
const char* mqtt_password = "iforza";
const char* mqtt_topic = "car";

// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
const char* device_id = "ESP32_Car_DEBUG";
const char* device_name = "ESP32 Debug Test";

// ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
WiFiClient espClient;
PubSubClient client(espClient);

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ (–ú–æ—Å–∫–≤–∞)
float base_lat = 55.75580;
float base_lng = 37.61760;

// –°—á–µ—Ç—á–∏–∫–∏ –∏ —Ç–∞–π–º–µ—Ä—ã
unsigned long lastMsg = 0;
unsigned long msgCount = 0;
unsigned long lastHeartbeat = 0;
unsigned long lastDebugInfo = 0;

// –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
bool systemOK = true;
int reconnectAttempts = 0;

void setup() {
  Serial.begin(115200);
  Serial.println();
  Serial.println("üöÄ ESP32 MQTT Debug Test v1.0");
  Serial.println("===============================");
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LED (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH); // –í–∫–ª—é—á–∞–µ–º LED –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi
  setup_wifi();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MQTT
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  
  Serial.println("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
  Serial.println("üì° –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
}

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi: ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 30) {
    delay(500);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("");
    Serial.println("‚úÖ WiFi –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
    Serial.print("üìç IP –∞–¥—Ä–µ—Å: ");
    Serial.println(WiFi.localIP());
    Serial.print("üì∂ –°–∏–≥–Ω–∞–ª: ");
    Serial.print(WiFi.RSSI());
    Serial.println(" dBm");
  } else {
    Serial.println("");
    Serial.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WiFi!");
    systemOK = false;
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ [");
  Serial.print(topic);
  Serial.print("]: ");
  
  String message = "";
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  Serial.println(message);
}

void reconnect() {
  while (!client.connected() && systemOK) {
    Serial.print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT...");
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π client ID
    String clientId = "ESP32Debug-";
    clientId += String(random(0xffff), HEX);
    
    if (client.connect(clientId.c_str(), mqtt_user, mqtt_password)) {
      Serial.println(" ‚úÖ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      sendDebugMessage("system", "üöÄ ESP32 Debug –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MQTT");
      sendDebugMessage("info", "Device ID: " + String(device_id));
      sendDebugMessage("info", "Client ID: " + clientId);
      
      reconnectAttempts = 0;
      digitalWrite(LED_BUILTIN, LOW); // –í—ã–∫–ª—é—á–∞–µ–º LED –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      
    } else {
      Serial.print(" ‚ùå –æ—à–∏–±–∫–∞, –∫–æ–¥: ");
      Serial.print(client.state());
      Serial.println(" –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫");
      
      reconnectAttempts++;
      if (reconnectAttempts > 10) {
        sendDebugMessage("error", "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...");
        delay(1000);
        ESP.restart();
      }
      
      digitalWrite(LED_BUILTIN, HIGH); // –í–∫–ª—é—á–∞–µ–º LED –ø—Ä–∏ –æ—à–∏–±–∫–µ
      delay(5000);
    }
  }
}

void sendDebugMessage(String type, String message) {
  StaticJsonDocument<200> doc;
  doc["type"] = "debug";
  doc["device_id"] = device_id;
  doc["debug_type"] = type;
  doc["message"] = message;
  doc["timestamp"] = millis();
  doc["free_heap"] = ESP.getFreeHeap();
  doc["wifi_rssi"] = WiFi.RSSI();
  
  String output;
  serializeJson(doc, output);
  
  if (client.connected()) {
    client.publish("debug/esp32", output.c_str());
  }
  
  Serial.println("üêõ [" + type + "] " + message);
}

void sendTelemetryData() {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  float lat = base_lat + (random(-100, 100) / 100000.0); // ¬±0.001 –≥—Ä–∞–¥—É—Å–∞
  float lng = base_lng + (random(-100, 100) / 100000.0);
  float speed = random(0, 30) + (random(0, 100) / 100.0); // 0-30 –∫–º/—á
  float battery = random(70, 100) + (random(0, 100) / 100.0); // 70-100%
  float temperature = random(20, 40) + (random(0, 100) / 100.0); // 20-40¬∞C
  int rpm = random(800, 2500); // 800-2500 RPM
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
  String status = speed > 1.0 ? "active" : "stopped";
  
  // –°–æ–∑–¥–∞–µ–º JSON –æ–±—ä–µ–∫—Ç
  StaticJsonDocument<512> doc;
  doc["id"] = device_id;
  doc["name"] = device_name;
  doc["lat"] = lat;
  doc["lng"] = lng;
  doc["speed"] = speed;
  doc["battery"] = battery;
  doc["temperature"] = temperature;
  doc["rpm"] = rpm;
  doc["status"] = status;
  doc["timestamp"] = millis();
  doc["message_count"] = msgCount;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  doc["system"]["free_heap"] = ESP.getFreeHeap();
  doc["system"]["wifi_rssi"] = WiFi.RSSI();
  doc["system"]["uptime"] = millis();
  doc["system"]["core_temp"] = temperatureRead();
  
  String output;
  serializeJson(doc, output);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
  if (client.connected()) {
    client.publish(mqtt_topic, output.c_str());
    
    Serial.println("üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ #" + String(msgCount));
    Serial.println("   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: " + String(lat, 6) + ", " + String(lng, 6));
    Serial.println("   üöó –°–∫–æ—Ä–æ—Å—Ç—å: " + String(speed, 1) + " –∫–º/—á");
    Serial.println("   üîã –ë–∞—Ç–∞—Ä–µ—è: " + String(battery, 1) + "%");
    Serial.println("   üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(temperature, 1) + "¬∞C");
    Serial.println("   ‚öôÔ∏è RPM: " + String(rpm));
    Serial.println("   üìä –°—Ç–∞—Ç—É—Å: " + status);
    Serial.println();
    
    msgCount++;
  } else {
    Serial.println("‚ùå MQTT –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
  }
}

void sendHeartbeat() {
  StaticJsonDocument<300> doc;
  doc["type"] = "heartbeat";
  doc["device_id"] = device_id;
  doc["name"] = device_name;
  doc["uptime"] = millis();
  doc["free_heap"] = ESP.getFreeHeap();
  doc["wifi_rssi"] = WiFi.RSSI();
  doc["message_count"] = msgCount;
  doc["reconnect_attempts"] = reconnectAttempts;
  doc["core_temp"] = temperatureRead();
  
  String output;
  serializeJson(doc, output);
  
  if (client.connected()) {
    client.publish("heartbeat/esp32", output.c_str());
    Serial.println("üíì Heartbeat –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
  }
}

void sendSystemInfo() {
  sendDebugMessage("info", "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: " + String(millis()/1000) + " —Å–µ–∫");
  sendDebugMessage("info", "–°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å: " + String(ESP.getFreeHeap()) + " –±–∞–π—Ç");
  sendDebugMessage("info", "WiFi —Å–∏–≥–Ω–∞–ª: " + String(WiFi.RSSI()) + " dBm");
  sendDebugMessage("info", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: " + String(msgCount));
  sendDebugMessage("info", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: " + String(temperatureRead()) + "¬∞C");
}

void loop() {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MQTT
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long now = millis();
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  if (now - lastMsg > 5000) {
    lastMsg = now;
    sendTelemetryData();
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  if (now - lastHeartbeat > 30000) {
    lastHeartbeat = now;
    sendHeartbeat();
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
  if (now - lastDebugInfo > 60000) {
    lastDebugInfo = now;
    sendSystemInfo();
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ WiFi –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå WiFi –æ—Ç–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
    setup_wifi();
  }
  
  delay(100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
} 