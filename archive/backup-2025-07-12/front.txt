root@5018543-bi97187:/var/www/mapmon# # –ß–µ—Ä–µ–∑ nginx (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç frontend)
curl -s "https://fleetmonitor.ru/api/vehicles" | jq
curl -s "https://fleetmonitor.ru/api/telemetry/latest" | jq

# –ü—Ä—è–º–æ –∫ API (–º–∏–Ω—É—è nginx)
curl -s "http://localhost:3001/api/vehicles" | jq
curl -s "http://localhost:3001/api/telemetry/latest" | jq
Command 'jq' not found, but can be installed with:
snap install jq  # version 1.5+dfsg-1, or
apt  install jq  # version 1.6-2.1ubuntu3
See 'snap info jq' for additional versions.
Command 'jq' not found, but can be installed with:
snap install jq  # version 1.5+dfsg-1, or
apt  install jq  # version 1.6-2.1ubuntu3
See 'snap info jq' for additional versions.
Command 'jq' not found, but can be installed with:
snap install jq  # version 1.5+dfsg-1, or
apt  install jq  # version 1.6-2.1ubuntu3
See 'snap info jq' for additional versions.
Command 'jq' not found, but can be installed with:
snap install jq  # version 1.5+dfsg-1, or
apt  install jq  # version 1.6-2.1ubuntu3
See 'snap info jq' for additional versions.
root@5018543-bi97187:/var/www/mapmon# # –ù–∞–π—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
find /var/www/mapmon -name "*.vue" -type f | grep -i "panel\|sidebar\|vehicle"

# –ù–∞–π—Ç–∏ –≥–¥–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏
find /var/www/mapmon -name "*.vue" -o -name "*.ts" -o -name "*.js" | xargs grep -l "vehicles\|—Ç–µ—Ö–Ω–∏–∫"

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–æ–∑–∞–±–ª useApi
cat /var/www/mapmon/composables/useApi.ts | grep -A 10 -B 10 "vehicles"
/var/www/mapmon/components/VehicleCard.vue
/var/www/mapmon/components/AdminPanel.vue
/var/www/mapmon/components/VehicleListPanel.vue
grep: /var/www/mapmon/node_modules/fuse.js: Is a directory
grep: /var/www/mapmon/node_modules/gl-matrix/types.d.ts: Is a directory
grep: /var/www/mapmon/node_modules/fraction.js: Is a directory
grep: /var/www/mapmon/node_modules/ipaddr.js: Is a directory
/var/www/mapmon/tests/e2e/critical-flows/vehicle-monitoring.spec.ts
/var/www/mapmon/tests/integration/mqtt/architecture-compatibility.test.ts
/var/www/mapmon/tests/unit/composables/useApi.test.ts
/var/www/mapmon/tests/utils/test-helpers.ts
/var/www/mapmon/.output/public/_nuxt/DbLtSupN.js
/var/www/mapmon/.output/public/_nuxt/BC2q9ysl.js
/var/www/mapmon/.output/public/_nuxt/BOcgc8JK.js
/var/www/mapmon/.output/public/_nuxt/-Dwe0YDS.js
grep: /var/www/mapmon/.output/server/node_modules/fuse.js: Is a directory
/var/www/mapmon/pages/history.vue
/var/www/mapmon/pages/index.vue
/var/www/mapmon/pages/analytics.vue
/var/www/mapmon/components/AdminPanel.vue
/var/www/mapmon/components/SettingsModal.vue
/var/www/mapmon/components/MapComponent.vue
/var/www/mapmon/components/VehicleListPanel.vue
/var/www/mapmon/.nuxt/dist/client/_nuxt/DbLtSupN.js
/var/www/mapmon/.nuxt/dist/client/_nuxt/BC2q9ysl.js
/var/www/mapmon/.nuxt/dist/client/_nuxt/BOcgc8JK.js
/var/www/mapmon/.nuxt/dist/client/_nuxt/-Dwe0YDS.js
/var/www/mapmon/.nuxt/dist/server/_nuxt/analytics-FOdiZC-F.js
/var/www/mapmon/.nuxt/dist/server/_nuxt/entry-styles-5.mjs-UJpfOcyN.js
/var/www/mapmon/.nuxt/dist/server/_nuxt/history-D64BR2iB.js
/var/www/mapmon/.nuxt/dist/server/_nuxt/index-BmSaiX23.js
/var/www/mapmon/composables/useApi.ts
/var/www/mapmon/composables/useAdmin.ts
/var/www/mapmon/composables/useChartData.ts
/var/www/mapmon/server-backup/server-MapComponent.vue
/var/www/mapmon/server-backup/server-analytics.vue
/var/www/mapmon/server-backup/server-AppHeader.vue
/var/www/mapmon/server-backup/server-index.vue
/var/www/mapmon/server-backup/server-app.vue
/var/www/mapmon/app.vue
/var/www/mapmon/nuxt.config.ts

interface ApiResponse<T> {
  success?: boolean
  data?: T
  count?: number
  status?: string
  database?: string
}

export const useApi = () => {
  const vehicles = ref<Map<string, VehicleData>>(new Map())
  const isConnected = ref(false)
  const isLoading = ref(false)
  const error = ref<string | null>(null)
  const wsConnection = ref<WebSocket | null>(null)

  // –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è polling
  let pollingInterval: NodeJS.Timeout | null = null
  let reconnectTimeout: NodeJS.Timeout | null = null
  let lastTimestamp = ref<number>(0)
  let pollingSpeed = ref<number>(5000) // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å 5 —Å–µ–∫—É–Ω–¥
--

  // API –±–∞–∑–æ–≤—ã–π URL
  const apiBase = '/api'

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
  const fetchVehicles = async (): Promise<VehicleData[]> => {
    try {
      isLoading.value = true
      error.value = null

      const response = await $fetch<ApiResponse<VehicleData[]>>(`${apiBase}/vehicles`)

      if (response.data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        vehicles.value.clear()
        response.data.forEach(vehicle => {
          vehicles.value.set(vehicle.id, {
            ...vehicle,
            timestamp: new Date(vehicle.timestamp),
            lastUpdate: new Date(vehicle.lastUpdate || vehicle.timestamp)
          })
        })
        return response.data
      }
      return []
    } catch (err: any) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Ö–Ω–∏–∫–µ'
      console.error('API Error (vehicles):', err)
      return []
    } finally {
      isLoading.value = false
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ (delta-–∑–∞–ø—Ä–æ—Å)
  const fetchTelemetryDelta = async () => {
    try {
      const response = await $fetch<ApiResponse<any[]> & { lastTimestamp?: number }>(`${apiBase}/telemetry/delta?since=${lastTimestamp.value}`)
--
          if (item.vehicle_id) {
            console.log(`üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ ${item.vehicle_id}:`, {
              lat: item.lat,
              lng: item.lng,
              speed: item.speed,
              status: (item.speed > 0) ? 'active' : 'stopped',
              battery: item.battery,
              temperature: item.temperature
            })

            const existing = vehicles.value.get(item.vehicle_id) || {
              id: item.vehicle_id,
              name: item.vehicle_name || `ESP32 ${item.vehicle_id}`,
              status: 'stopped'
            }

            const updated: VehicleData = {
              ...existing,
              id: item.vehicle_id,
              name: item.vehicle_name || existing.name,
              lat: parseFloat(item.lat) || 0,
--
              speed: parseFloat(item.speed) || 0,
              battery: item.battery ? parseFloat(item.battery) : undefined,
              temperature: item.temperature ? parseFloat(item.temperature) : undefined,
              rpm: item.rpm ? parseInt(item.rpm) : undefined,
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç ESP32)
              status: (parseFloat(item.speed) || 0) > 0 ? 'active' : 'stopped',
              timestamp: new Date(item.timestamp),
              lastUpdate: new Date(item.timestamp)
            }

            vehicles.value.set(item.vehicle_id, updated)
          }
        })

        // –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const updatedVehicles = new Map(vehicles.value)
        if (updatedVehicles.size !== vehicles.value.size || telemetryData.length > 0) {
          vehicles.value = updatedVehicles
        }

        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ—Ö–Ω–∏–∫–∏: ${vehicles.value?.size || 0}`)
      }

      return telemetryData
    } catch (err: any) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏'
      console.error('API Error (telemetry):', err)
      return []
    }
  }

--
          console.log('‚úÖ WebSocket connected')
        }

        wsConnection.value.onmessage = (event) => {
          try {
            const data = JSON.parse(event.data)
            console.log('üì° WebSocket data:', data)

            if (data.type === 'vehicle_update' && data.data) {
              const vehicle = data.data
              vehicles.value.set(vehicle.id, {
                ...vehicle,
                timestamp: new Date(vehicle.timestamp),
                lastUpdate: new Date()
              })
              vehicles.value = new Map(vehicles.value)
            }
          } catch (err) {
            console.error('WebSocket message error:', err)
          }
        }

        wsConnection.value.onclose = () => {
          console.log('‚ùå WebSocket disconnected')
          // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π timeout –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
          if (reconnectTimeout) {
--

    if (isConnected.value) {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ SQLite
      console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ SQLite...')
      await fetchVehicles()

      // –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      console.log('üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ ESP32...')
      await fetchTelemetry()

      console.log(`‚úÖ API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –¢–µ—Ö–Ω–∏–∫–∏: ${vehicles.value?.size || 0}`)
    } else {
      console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ polling
  const calculatePollingSpeed = (dataCount: number, hasActive: boolean) => {
    if (dataCount === 0) {
      consecutiveEmptyResponses.value++
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
--
    stopPolling()

    const performPolling = async () => {
      if (!isConnected.value) return

      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º delta-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        const deltaResult = await fetchTelemetryDelta()

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏
        hasActiveVehicles.value = Array.from(vehicles.value.values()).some(v =>
          v.status === 'active' || (v.speed || 0) > 0
        )

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å polling
        const newSpeed = calculatePollingSpeed(deltaResult.count, hasActiveVehicles.value)

        if (newSpeed !== pollingSpeed.value) {
          pollingSpeed.value = newSpeed
          console.log(`üîÑ –°–∫–æ—Ä–æ—Å—Ç—å polling –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${pollingSpeed.value}ms`)

--
    }
  }

  // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  const cleanup = () => {
    stopPolling()
    disconnectWebSocket()
  }

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  const allVehicles = computed(() => Array.from(vehicles.value.values()))
  const activeVehicles = computed(() => {
    const now = Date.now()
    return allVehicles.value.filter(v => {
      // –°—á–∏—Ç–∞–µ–º —Ç–µ—Ö–Ω–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ–π –µ—Å–ª–∏:
      // 1. –°—Ç–∞—Ç—É—Å —è–≤–Ω–æ 'active' (ESP32 –ø–µ—Ä–µ–¥–∞—ë—Ç —ç—Ç–æ –ø–æ–ª–µ)
      // 2. –ò–õ–ò —Å–∫–æ—Ä–æ—Å—Ç—å –±–æ–ª—å—à–µ 0
      // 3. –ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –º–µ–Ω–µ–µ 60 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥ (—Ç–µ—Ö–Ω–∏–∫–∞ –æ–Ω–ª–∞–π–Ω)
      const hasActiveStatus = v.status === 'active'
      const isMoving = (v.speed || 0) > 0
      const isOnline = v.lastUpdate && (now - new Date(v.lastUpdate).getTime()) < 60000 // 1 –º–∏–Ω—É—Ç–∞

      console.log(`üöú ${v.id}: status=${v.status}, speed=${v.speed}, online=${isOnline}, active=${hasActiveStatus || isMoving}`)

      return (hasActiveStatus || isMoving) && isOnline
    }).length
  })

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    vehicles,
    isConnected,
    isLoading,
    error,

    // –ú–µ—Ç–æ–¥—ã
    fetchVehicles,
    fetchTelemetry,
    fetchTelemetryDelta,
    checkApiStatus,
    initialize,
root@5018543-bi97187:/var/www/mapmon# # VehicleListPanel - –≥–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
cat /var/www/mapmon/components/VehicleListPanel.vue | grep -A 5 -B 5 "api\|fetch\|vehicles"

# VehicleManager - –º–µ–Ω–µ–¥–∂–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤
cat /var/www/mapmon/composables/useVehicleManager.ts | grep -A 10 -B 10 "api\|fetch"

# –ì–ª–∞–≤–Ω—ã–π app.vue
cat /var/www/mapmon/app.vue | grep -A 10 -B 10 "VehicleListPanel\|api"
    </div>

    <!-- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞ -->
    <div class="list-content">
      <!-- –ê–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ -->
      <div v-if="vehicleManager.activeVehicles.value.length > 0" class="active-vehicles">
        <VehicleCard
          v-for="vehicle in vehicleManager.activeVehicles.value"
          :key="vehicle.id"
          :vehicle="vehicle"
          :is-selected="vehicleManager.selectedVehicleId.value === vehicle.id"
--

.list-content {
  @apply flex-1 overflow-y-auto p-4;
}

.active-vehicles {
  @apply space-y-3;
}

.update-info {
  @apply p-4 border-t border-gray-700 bg-gray-800;

  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
  let cleanupInterval: NodeJS.Timeout | null = null

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  const ONLINE_THRESHOLD = 10000  // 10 —Å–µ–∫—É–Ω–¥
  const IDLE_THRESHOLD = 30000    // 30 —Å–µ–∫—É–Ω–¥
  const CLEANUP_INTERVAL = 15000  // 15 —Å–µ–∫—É–Ω–¥

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
  const api = useApi()
  const { formatTime, getRelativeTime } = useTime()

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const getVehicleStatus = (lastUpdate: Date): VehicleStatus => {
    const now = Date.now()
    const timeDiff = now - lastUpdate.getTime()

    if (timeDiff < ONLINE_THRESHOLD) {
      return VehicleStatus.ONLINE
    } else if (timeDiff < IDLE_THRESHOLD) {
      return VehicleStatus.IDLE
    } else {
      return VehicleStatus.DISCONNECTED
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
  const processVehicleData = (apiVehicles: any[]) => {
    const now = Date.now()

    apiVehicles.forEach(vehicle => {
      const lastUpdate = new Date(vehicle.lastUpdate || vehicle.timestamp)
      const status = getVehicleStatus(lastUpdate)

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      const managedVehicle: ManagedVehicle = {
        id: vehicle.id,
        name: vehicle.name,
        lat: vehicle.lat || 0,
        lng: vehicle.lng || 0,
        speed: vehicle.speed || 0,
--
        inactiveVehicles.value.delete(id)
      }
    })

    inactiveVehicles.value = new Map(inactiveVehicles.value)
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  const initialize = async () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!api.isConnected.value) {
      await api.initialize()
      api.startPolling()
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É
    cleanupInterval = setInterval(() => {
      cleanupOldDevices()
    }, CLEANUP_INTERVAL)

    // –†–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ API
    watch(
      () => api.allVehicles.value,
      (newVehicles) => {
        if (newVehicles.length > 0) {
          processVehicleData(newVehicles)
        }
      },
      { immediate: true, deep: true }
    )
  }

  // –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
--
  const totalVehicles = computed(() => allActiveVehicles.value.length + allInactiveVehicles.value.length)
  const onlineVehicles = computed(() => allActiveVehicles.value.filter(v => v.status === VehicleStatus.ONLINE))
  const movingVehicles = computed(() => allActiveVehicles.value.filter(v => v.isActive))

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  const cleanup = () => {
    if (cleanupInterval) {
      clearInterval(cleanupInterval)
      cleanupInterval = null
    }
    api.cleanup()
  }

  // –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  onUnmounted(() => {
    cleanup()
  })

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    activeVehicles: allActiveVehicles,
      >
        <div class="w-2 h-2 bg-green-300 rounded-full"></div>
        <span class="font-medium">–ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞: {{ vehicleId }}</span>
      </div>
    </div>

    <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç -->
    <main class="flex h-[calc(100vh-4rem)]">
      <!-- –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (30%) - –ù–æ–≤–∞—è —É–º–Ω–∞—è –ø–∞–Ω–µ–ª—å -->
      <div class="w-[30%]">
        <VehicleListPanel />
      </div>

      <!-- –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–∞—Ä—Ç–æ–π (70%) -->
      <div class="flex-1 relative">
        <NuxtPage />
      </div>
    </main>
  </div>
</template>

<script setup>
import { onMounted, onUnmounted } from 'vue'
import { useApi } from '~/composables/useApi'

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
useColorMode().value = 'dark'

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
const api = useApi()

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
onMounted(async () => {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ MapMon - –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API')

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  await api.initialize()

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  api.startPolling()

  console.log('‚úÖ MapMon –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')
})

// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
onUnmounted(() => {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ app.vue')
  api.cleanup()
})

// –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
useHead({
  title: 'Fleet Monitor - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ—Ö–Ω–∏–∫–∏',
  meta: [
    { name: 'description', content: '–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ —Å —É–º–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏' }
  ]
})
</script>